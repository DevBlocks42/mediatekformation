1738044941
84e399b8f2181ccd73394fdeddff1638-phpdoc%3A3039366a1bd5d8fedc3dd190e909fbc8-087837ad4cc6c5a983c8b119580e7574
s:9172:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjE0OiJ2YWxpZGF0aW9uLnBocCI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9czo0MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBlbnVtcyI7YTowOnt9czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBoYXNoIjtzOjMyOiIwODc4MzdhZDRjYzZjNWE5ODNjOGIxMTk1ODBlNzU3NCI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjI4OiJ2YXIvY2FjaGUvZGV2L3ZhbGlkYXRpb24ucGhwIjtzOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHNvdXJjZSI7czo1OTY4OiI8P3BocAoKLy8gVGhpcyBmaWxlIGhhcyBiZWVuIGF1dG8tZ2VuZXJhdGVkIGJ5IHRoZSBTeW1mb255IENhY2hlIENvbXBvbmVudC4KCnJldHVybiBbWwoKJ1N5bWZvbnkuQ29tcG9uZW50LkZvcm0uRm9ybScgPT4gMCwKJ0l0ZXJhdG9yQWdncmVnYXRlJyA9PiAxLAonU3ltZm9ueS5Db21wb25lbnQuRm9ybS5Gb3JtSW50ZXJmYWNlJyA9PiAyLAonU3ltZm9ueS5Db21wb25lbnQuRm9ybS5DbGVhcmFibGVFcnJvcnNJbnRlcmZhY2UnID0+IDMsCidUcmF2ZXJzYWJsZScgPT4gNCwKJ0NvdW50YWJsZScgPT4gNSwKJ0FycmF5QWNjZXNzJyA9PiA2LAoKXSwgWwoKMCA9PiBzdGF0aWMgZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxIeWRyYXRvcjo6aHlkcmF0ZSgKICAgICAgICAkbyA9IFsKICAgICAgICAgICAgKFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxSZWdpc3RyeTo6JGZhY3Rvcmllc1snU3ltZm9ueVxcQ29tcG9uZW50XFxWYWxpZGF0b3JcXE1hcHBpbmdcXENsYXNzTWV0YWRhdGEnXSA/PyBcU3ltZm9ueVxDb21wb25lbnRcVmFyRXhwb3J0ZXJcSW50ZXJuYWxcUmVnaXN0cnk6OmYoJ1N5bWZvbnlcXENvbXBvbmVudFxcVmFsaWRhdG9yXFxNYXBwaW5nXFxDbGFzc01ldGFkYXRhJykpKCksCiAgICAgICAgICAgIGNsb25lIChcU3ltZm9ueVxDb21wb25lbnRcVmFyRXhwb3J0ZXJcSW50ZXJuYWxcUmVnaXN0cnk6OiRwcm90b3R5cGVzWydTeW1mb255XFxDb21wb25lbnRcXEZvcm1cXEV4dGVuc2lvblxcVmFsaWRhdG9yXFxDb25zdHJhaW50c1xcRm9ybSddID8/IFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxSZWdpc3RyeTo6cCgnU3ltZm9ueVxcQ29tcG9uZW50XFxGb3JtXFxFeHRlbnNpb25cXFZhbGlkYXRvclxcQ29uc3RyYWludHNcXEZvcm0nKSksCiAgICAgICAgXSwKICAgICAgICBudWxsLAogICAgICAgIFsKICAgICAgICAgICAgJ3N0ZENsYXNzJyA9PiBbCiAgICAgICAgICAgICAgICAnY29uc3RyYWludHMnID0+IFsKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICRvWzFdLAogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgJ2NvbnN0cmFpbnRzQnlHcm91cCcgPT4gWwogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgJ0RlZmF1bHQnID0+IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRvWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAnRm9ybScgPT4gWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJG9bMV0sCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAndHJhdmVyc2FsU3RyYXRlZ3knID0+IFsKICAgICAgICAgICAgICAgICAgICAyLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICduYW1lJyA9PiBbCiAgICAgICAgICAgICAgICAgICAgJ1N5bWZvbnlcXENvbXBvbmVudFxcRm9ybVxcRm9ybScsCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgJ2RlZmF1bHRHcm91cCcgPT4gWwogICAgICAgICAgICAgICAgICAgICdGb3JtJywKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAnZ3JvdXBzJyA9PiBbCiAgICAgICAgICAgICAgICAgICAgMSA9PiBbCiAgICAgICAgICAgICAgICAgICAgICAgICdEZWZhdWx0JywKICAgICAgICAgICAgICAgICAgICAgICAgJ0Zvcm0nLAogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICBdLAogICAgICAgIF0sCiAgICAgICAgJG9bMF0sCiAgICAgICAgW10KICAgICk7Cn0sCjEgPT4gc3RhdGljIGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBcU3ltZm9ueVxDb21wb25lbnRcVmFyRXhwb3J0ZXJcSW50ZXJuYWxcSHlkcmF0b3I6Omh5ZHJhdGUoCiAgICAgICAgJG8gPSBbCiAgICAgICAgICAgIChcU3ltZm9ueVxDb21wb25lbnRcVmFyRXhwb3J0ZXJcSW50ZXJuYWxcUmVnaXN0cnk6OiRmYWN0b3JpZXNbJ1N5bWZvbnlcXENvbXBvbmVudFxcVmFsaWRhdG9yXFxNYXBwaW5nXFxDbGFzc01ldGFkYXRhJ10gPz8gXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXFJlZ2lzdHJ5OjpmKCdTeW1mb255XFxDb21wb25lbnRcXFZhbGlkYXRvclxcTWFwcGluZ1xcQ2xhc3NNZXRhZGF0YScpKSgpLAogICAgICAgIF0sCiAgICAgICAgbnVsbCwKICAgICAgICBbCiAgICAgICAgICAgICdzdGRDbGFzcycgPT4gWwogICAgICAgICAgICAgICAgJ25hbWUnID0+IFsKICAgICAgICAgICAgICAgICAgICAnSXRlcmF0b3JBZ2dyZWdhdGUnLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICdkZWZhdWx0R3JvdXAnID0+IFsKICAgICAgICAgICAgICAgICAgICAnSXRlcmF0b3JBZ2dyZWdhdGUnLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgXSwKICAgICAgICBdLAogICAgICAgICRvWzBdLAogICAgICAgIFtdCiAgICApOwp9LAoyID0+IHN0YXRpYyBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXEh5ZHJhdG9yOjpoeWRyYXRlKAogICAgICAgICRvID0gWwogICAgICAgICAgICAoXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXFJlZ2lzdHJ5OjokZmFjdG9yaWVzWydTeW1mb255XFxDb21wb25lbnRcXFZhbGlkYXRvclxcTWFwcGluZ1xcQ2xhc3NNZXRhZGF0YSddID8/IFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxSZWdpc3RyeTo6ZignU3ltZm9ueVxcQ29tcG9uZW50XFxWYWxpZGF0b3JcXE1hcHBpbmdcXENsYXNzTWV0YWRhdGEnKSkoKSwKICAgICAgICBdLAogICAgICAgIG51bGwsCiAgICAgICAgWwogICAgICAgICAgICAnc3RkQ2xhc3MnID0+IFsKICAgICAgICAgICAgICAgICduYW1lJyA9PiBbCiAgICAgICAgICAgICAgICAgICAgJ1N5bWZvbnlcXENvbXBvbmVudFxcRm9ybVxcRm9ybUludGVyZmFjZScsCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgJ2RlZmF1bHRHcm91cCcgPT4gWwogICAgICAgICAgICAgICAgICAgICdGb3JtSW50ZXJmYWNlJywKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgIF0sCiAgICAgICAgXSwKICAgICAgICAkb1swXSwKICAgICAgICBbXQogICAgKTsKfSwKMyA9PiBzdGF0aWMgZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxIeWRyYXRvcjo6aHlkcmF0ZSgKICAgICAgICAkbyA9IFsKICAgICAgICAgICAgKFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxSZWdpc3RyeTo6JGZhY3Rvcmllc1snU3ltZm9ueVxcQ29tcG9uZW50XFxWYWxpZGF0b3JcXE1hcHBpbmdcXENsYXNzTWV0YWRhdGEnXSA/PyBcU3ltZm9ueVxDb21wb25lbnRcVmFyRXhwb3J0ZXJcSW50ZXJuYWxcUmVnaXN0cnk6OmYoJ1N5bWZvbnlcXENvbXBvbmVudFxcVmFsaWRhdG9yXFxNYXBwaW5nXFxDbGFzc01ldGFkYXRhJykpKCksCiAgICAgICAgXSwKICAgICAgICBudWxsLAogICAgICAgIFsKICAgICAgICAgICAgJ3N0ZENsYXNzJyA9PiBbCiAgICAgICAgICAgICAgICAnbmFtZScgPT4gWwogICAgICAgICAgICAgICAgICAgICdTeW1mb255XFxDb21wb25lbnRcXEZvcm1cXENsZWFyYWJsZUVycm9yc0ludGVyZmFjZScsCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgJ2RlZmF1bHRHcm91cCcgPT4gWwogICAgICAgICAgICAgICAgICAgICdDbGVhcmFibGVFcnJvcnNJbnRlcmZhY2UnLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgXSwKICAgICAgICBdLAogICAgICAgICRvWzBdLAogICAgICAgIFtdCiAgICApOwp9LAo0ID0+IHN0YXRpYyBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXEh5ZHJhdG9yOjpoeWRyYXRlKAogICAgICAgICRvID0gWwogICAgICAgICAgICAoXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXFJlZ2lzdHJ5OjokZmFjdG9yaWVzWydTeW1mb255XFxDb21wb25lbnRcXFZhbGlkYXRvclxcTWFwcGluZ1xcQ2xhc3NNZXRhZGF0YSddID8/IFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxSZWdpc3RyeTo6ZignU3ltZm9ueVxcQ29tcG9uZW50XFxWYWxpZGF0b3JcXE1hcHBpbmdcXENsYXNzTWV0YWRhdGEnKSkoKSwKICAgICAgICBdLAogICAgICAgIG51bGwsCiAgICAgICAgWwogICAgICAgICAgICAnc3RkQ2xhc3MnID0+IFsKICAgICAgICAgICAgICAgICduYW1lJyA9PiBbCiAgICAgICAgICAgICAgICAgICAgJ1RyYXZlcnNhYmxlJywKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAnZGVmYXVsdEdyb3VwJyA9PiBbCiAgICAgICAgICAgICAgICAgICAgJ1RyYXZlcnNhYmxlJywKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgIF0sCiAgICAgICAgXSwKICAgICAgICAkb1swXSwKICAgICAgICBbXQogICAgKTsKfSwKNSA9PiBzdGF0aWMgZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxIeWRyYXRvcjo6aHlkcmF0ZSgKICAgICAgICAkbyA9IFsKICAgICAgICAgICAgKFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxSZWdpc3RyeTo6JGZhY3Rvcmllc1snU3ltZm9ueVxcQ29tcG9uZW50XFxWYWxpZGF0b3JcXE1hcHBpbmdcXENsYXNzTWV0YWRhdGEnXSA/PyBcU3ltZm9ueVxDb21wb25lbnRcVmFyRXhwb3J0ZXJcSW50ZXJuYWxcUmVnaXN0cnk6OmYoJ1N5bWZvbnlcXENvbXBvbmVudFxcVmFsaWRhdG9yXFxNYXBwaW5nXFxDbGFzc01ldGFkYXRhJykpKCksCiAgICAgICAgXSwKICAgICAgICBudWxsLAogICAgICAgIFsKICAgICAgICAgICAgJ3N0ZENsYXNzJyA9PiBbCiAgICAgICAgICAgICAgICAnbmFtZScgPT4gWwogICAgICAgICAgICAgICAgICAgICdDb3VudGFibGUnLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICdkZWZhdWx0R3JvdXAnID0+IFsKICAgICAgICAgICAgICAgICAgICAnQ291bnRhYmxlJywKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgIF0sCiAgICAgICAgXSwKICAgICAgICAkb1swXSwKICAgICAgICBbXQogICAgKTsKfSwKNiA9PiBzdGF0aWMgZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxIeWRyYXRvcjo6aHlkcmF0ZSgKICAgICAgICAkbyA9IFsKICAgICAgICAgICAgKFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxSZWdpc3RyeTo6JGZhY3Rvcmllc1snU3ltZm9ueVxcQ29tcG9uZW50XFxWYWxpZGF0b3JcXE1hcHBpbmdcXENsYXNzTWV0YWRhdGEnXSA/PyBcU3ltZm9ueVxDb21wb25lbnRcVmFyRXhwb3J0ZXJcSW50ZXJuYWxcUmVnaXN0cnk6OmYoJ1N5bWZvbnlcXENvbXBvbmVudFxcVmFsaWRhdG9yXFxNYXBwaW5nXFxDbGFzc01ldGFkYXRhJykpKCksCiAgICAgICAgXSwKICAgICAgICBudWxsLAogICAgICAgIFsKICAgICAgICAgICAgJ3N0ZENsYXNzJyA9PiBbCiAgICAgICAgICAgICAgICAnbmFtZScgPT4gWwogICAgICAgICAgICAgICAgICAgICdBcnJheUFjY2VzcycsCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgJ2RlZmF1bHRHcm91cCcgPT4gWwogICAgICAgICAgICAgICAgICAgICdBcnJheUFjY2VzcycsCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICBdLAogICAgICAgIF0sCiAgICAgICAgJG9bMF0sCiAgICAgICAgW10KICAgICk7Cn0sCgpdXTsKIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGRvY0Jsb2NrIjtOO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";