1738045001
84e399b8f2181ccd73394fdeddff1638-phpdoc%3A7a2cdb4601c6be66faf2604788ece655-6ac7828217618b612605db06c871816b
s:20120:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjEyOiJzZWN1cml0eS5waHAiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YToxOntzOjU4OiJcU3ltZm9ueVxDb21wb25lbnRcRGVwZW5kZW5jeUluamVjdGlvblxMb2FkZXJcQ29uZmlndXJhdG9yIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NTg6IlxTeW1mb255XENvbXBvbmVudFxEZXBlbmRlbmN5SW5qZWN0aW9uXExvYWRlclxDb25maWd1cmF0b3IiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMjoiQ29uZmlndXJhdG9yIjt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjZhYzc4MjgyMTc2MThiNjEyNjA1ZGIwNmM4NzE4MTZiIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NjA6InZlbmRvci9zeW1mb255L3NlY3VyaXR5LWJ1bmRsZS9SZXNvdXJjZXMvY29uZmlnL3NlY3VyaXR5LnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6MTM4NjU6Ijw/cGhwCgovKgogKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgU3ltZm9ueSBwYWNrYWdlLgogKgogKiAoYykgRmFiaWVuIFBvdGVuY2llciA8ZmFiaWVuQHN5bWZvbnkuY29tPgogKgogKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRQogKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS4KICovCgpuYW1lc3BhY2UgU3ltZm9ueVxDb21wb25lbnRcRGVwZW5kZW5jeUluamVjdGlvblxMb2FkZXJcQ29uZmlndXJhdG9yOwoKdXNlIFN5bWZvbnlcQnVuZGxlXFNlY3VyaXR5QnVuZGxlXENhY2hlV2FybWVyXEV4cHJlc3Npb25DYWNoZVdhcm1lcjsKdXNlIFN5bWZvbnlcQnVuZGxlXFNlY3VyaXR5QnVuZGxlXEV2ZW50TGlzdGVuZXJcRmlyZXdhbGxMaXN0ZW5lcjsKdXNlIFN5bWZvbnlcQnVuZGxlXFNlY3VyaXR5QnVuZGxlXFJvdXRpbmdcTG9nb3V0Um91dGVMb2FkZXI7CnVzZSBTeW1mb255XEJ1bmRsZVxTZWN1cml0eUJ1bmRsZVxTZWN1cml0eTsKdXNlIFN5bWZvbnlcQnVuZGxlXFNlY3VyaXR5QnVuZGxlXFNlY3VyaXR5XEZpcmV3YWxsQ29uZmlnOwp1c2UgU3ltZm9ueVxCdW5kbGVcU2VjdXJpdHlCdW5kbGVcU2VjdXJpdHlcRmlyZXdhbGxDb250ZXh0Owp1c2UgU3ltZm9ueVxCdW5kbGVcU2VjdXJpdHlCdW5kbGVcU2VjdXJpdHlcRmlyZXdhbGxNYXA7CnVzZSBTeW1mb255XEJ1bmRsZVxTZWN1cml0eUJ1bmRsZVxTZWN1cml0eVxMYXp5RmlyZXdhbGxDb250ZXh0Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcRXhwcmVzc2lvbkxhbmd1YWdlXEV4cHJlc3Npb25MYW5ndWFnZSBhcyBCYXNlRXhwcmVzc2lvbkxhbmd1YWdlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcTGRhcFxTZWN1cml0eVxMZGFwVXNlclByb3ZpZGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcU2VjdXJpdHlcQ29yZVxBdXRoZW50aWNhdGlvblxBdXRoZW50aWNhdGlvblRydXN0UmVzb2x2ZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxDb3JlXEF1dGhlbnRpY2F0aW9uXFRva2VuXFN0b3JhZ2VcVG9rZW5TdG9yYWdlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcU2VjdXJpdHlcQ29yZVxBdXRoZW50aWNhdGlvblxUb2tlblxTdG9yYWdlXFRva2VuU3RvcmFnZUludGVyZmFjZTsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFNlY3VyaXR5XENvcmVcQXV0aGVudGljYXRpb25cVG9rZW5cU3RvcmFnZVxVc2FnZVRyYWNraW5nVG9rZW5TdG9yYWdlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcU2VjdXJpdHlcQ29yZVxBdXRob3JpemF0aW9uXEFjY2Vzc0RlY2lzaW9uTWFuYWdlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFNlY3VyaXR5XENvcmVcQXV0aG9yaXphdGlvblxBY2Nlc3NEZWNpc2lvbk1hbmFnZXJJbnRlcmZhY2U7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxDb3JlXEF1dGhvcml6YXRpb25cQXV0aG9yaXphdGlvbkNoZWNrZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxDb3JlXEF1dGhvcml6YXRpb25cQXV0aG9yaXphdGlvbkNoZWNrZXJJbnRlcmZhY2U7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxDb3JlXEF1dGhvcml6YXRpb25cRXhwcmVzc2lvbkxhbmd1YWdlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcU2VjdXJpdHlcQ29yZVxBdXRob3JpemF0aW9uXFZvdGVyXEF1dGhlbnRpY2F0ZWRWb3RlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFNlY3VyaXR5XENvcmVcQXV0aG9yaXphdGlvblxWb3RlclxFeHByZXNzaW9uVm90ZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxDb3JlXEF1dGhvcml6YXRpb25cVm90ZXJcUm9sZUhpZXJhcmNoeVZvdGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcU2VjdXJpdHlcQ29yZVxBdXRob3JpemF0aW9uXFZvdGVyXFJvbGVWb3RlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFNlY3VyaXR5XENvcmVcUm9sZVxSb2xlSGllcmFyY2h5Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcU2VjdXJpdHlcQ29yZVxSb2xlXFJvbGVIaWVyYXJjaHlJbnRlcmZhY2U7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxDb3JlXFNlY3VyaXR5IGFzIExlZ2FjeVNlY3VyaXR5Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcU2VjdXJpdHlcQ29yZVxVc2VyXENoYWluVXNlclByb3ZpZGVyOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcU2VjdXJpdHlcQ29yZVxVc2VyXEluTWVtb3J5VXNlckNoZWNrZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxDb3JlXFVzZXJcSW5NZW1vcnlVc2VyUHJvdmlkZXI7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxDb3JlXFVzZXJcTWlzc2luZ1VzZXJQcm92aWRlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFNlY3VyaXR5XENvcmVcVmFsaWRhdG9yXENvbnN0cmFpbnRzXFVzZXJQYXNzd29yZFZhbGlkYXRvcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFNlY3VyaXR5XEh0dHBcQXV0aGVudGljYXRpb25cQXV0aGVudGljYXRpb25VdGlsczsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFNlY3VyaXR5XEh0dHBcQ29udHJvbGxlclxTZWN1cml0eVRva2VuVmFsdWVSZXNvbHZlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFNlY3VyaXR5XEh0dHBcQ29udHJvbGxlclxVc2VyVmFsdWVSZXNvbHZlcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFNlY3VyaXR5XEh0dHBcRXZlbnRMaXN0ZW5lclxJc0dyYW50ZWRBdHRyaWJ1dGVMaXN0ZW5lcjsKdXNlIFN5bWZvbnlcQ29tcG9uZW50XFNlY3VyaXR5XEh0dHBcRmlyZXdhbGw7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxIdHRwXEZpcmV3YWxsTWFwSW50ZXJmYWNlOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcU2VjdXJpdHlcSHR0cFxIdHRwVXRpbHM7CnVzZSBTeW1mb255XENvbXBvbmVudFxTZWN1cml0eVxIdHRwXEltcGVyc29uYXRlXEltcGVyc29uYXRlVXJsR2VuZXJhdG9yOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcU2VjdXJpdHlcSHR0cFxMb2dvdXRcTG9nb3V0VXJsR2VuZXJhdG9yOwp1c2UgU3ltZm9ueVxDb21wb25lbnRcU2VjdXJpdHlcSHR0cFxTZXNzaW9uXFNlc3Npb25BdXRoZW50aWNhdGlvblN0cmF0ZWd5Owp1c2UgU3ltZm9ueVxDb21wb25lbnRcU2VjdXJpdHlcSHR0cFxTZXNzaW9uXFNlc3Npb25BdXRoZW50aWNhdGlvblN0cmF0ZWd5SW50ZXJmYWNlOwoKcmV0dXJuIHN0YXRpYyBmdW5jdGlvbiAoQ29udGFpbmVyQ29uZmlndXJhdG9yICRjb250YWluZXIpIHsKICAgICRjb250YWluZXItPnBhcmFtZXRlcnMoKQogICAgICAgIC0+c2V0KCdzZWN1cml0eS5yb2xlX2hpZXJhcmNoeS5yb2xlcycsIFtdKQogICAgOwoKICAgICRjb250YWluZXItPnNlcnZpY2VzKCkKICAgICAgICAtPnNldCgnc2VjdXJpdHkuYXV0aG9yaXphdGlvbl9jaGVja2VyJywgQXV0aG9yaXphdGlvbkNoZWNrZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgnc2VjdXJpdHkudG9rZW5fc3RvcmFnZScpLAogICAgICAgICAgICAgICAgc2VydmljZSgnc2VjdXJpdHkuYWNjZXNzLmRlY2lzaW9uX21hbmFnZXInKSwKICAgICAgICAgICAgXSkKICAgICAgICAtPmFsaWFzKEF1dGhvcml6YXRpb25DaGVja2VySW50ZXJmYWNlOjpjbGFzcywgJ3NlY3VyaXR5LmF1dGhvcml6YXRpb25fY2hlY2tlcicpCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS50b2tlbl9zdG9yYWdlJywgVXNhZ2VUcmFja2luZ1Rva2VuU3RvcmFnZTo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZWN1cml0eS51bnRyYWNrZWRfdG9rZW5fc3RvcmFnZScpLAogICAgICAgICAgICAgICAgc2VydmljZV9sb2NhdG9yKFsKICAgICAgICAgICAgICAgICAgICAncmVxdWVzdF9zdGFjaycgPT4gc2VydmljZSgncmVxdWVzdF9zdGFjaycpLAogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+dGFnKCdrZXJuZWwucmVzZXQnLCBbJ21ldGhvZCcgPT4gJ2Rpc2FibGVVc2FnZVRyYWNraW5nJ10pCiAgICAgICAgICAgIC0+dGFnKCdrZXJuZWwucmVzZXQnLCBbJ21ldGhvZCcgPT4gJ3NldFRva2VuJ10pCiAgICAgICAgLT5hbGlhcyhUb2tlblN0b3JhZ2VJbnRlcmZhY2U6OmNsYXNzLCAnc2VjdXJpdHkudG9rZW5fc3RvcmFnZScpCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS51bnRyYWNrZWRfdG9rZW5fc3RvcmFnZScsIFRva2VuU3RvcmFnZTo6Y2xhc3MpCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS5oZWxwZXInLCBTZWN1cml0eTo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlX2xvY2F0b3IoWwogICAgICAgICAgICAgICAgICAgICdzZWN1cml0eS50b2tlbl9zdG9yYWdlJyA9PiBzZXJ2aWNlKCdzZWN1cml0eS50b2tlbl9zdG9yYWdlJyksCiAgICAgICAgICAgICAgICAgICAgJ3NlY3VyaXR5LmF1dGhvcml6YXRpb25fY2hlY2tlcicgPT4gc2VydmljZSgnc2VjdXJpdHkuYXV0aG9yaXphdGlvbl9jaGVja2VyJyksCiAgICAgICAgICAgICAgICAgICAgJ3NlY3VyaXR5LmF1dGhlbnRpY2F0b3IubWFuYWdlcnNfbG9jYXRvcicgPT4gc2VydmljZSgnc2VjdXJpdHkuYXV0aGVudGljYXRvci5tYW5hZ2Vyc19sb2NhdG9yJyktPmlnbm9yZU9uSW52YWxpZCgpLAogICAgICAgICAgICAgICAgICAgICdyZXF1ZXN0X3N0YWNrJyA9PiBzZXJ2aWNlKCdyZXF1ZXN0X3N0YWNrJyksCiAgICAgICAgICAgICAgICAgICAgJ3NlY3VyaXR5LmZpcmV3YWxsLm1hcCcgPT4gc2VydmljZSgnc2VjdXJpdHkuZmlyZXdhbGwubWFwJyksCiAgICAgICAgICAgICAgICAgICAgJ3NlY3VyaXR5LnVzZXJfY2hlY2tlcicgPT4gc2VydmljZSgnc2VjdXJpdHkudXNlcl9jaGVja2VyJyksCiAgICAgICAgICAgICAgICAgICAgJ3NlY3VyaXR5LmZpcmV3YWxsLmV2ZW50X2Rpc3BhdGNoZXJfbG9jYXRvcicgPT4gc2VydmljZSgnc2VjdXJpdHkuZmlyZXdhbGwuZXZlbnRfZGlzcGF0Y2hlcl9sb2NhdG9yJyksCiAgICAgICAgICAgICAgICAgICAgJ3NlY3VyaXR5LmNzcmYudG9rZW5fbWFuYWdlcicgPT4gc2VydmljZSgnc2VjdXJpdHkuY3NyZi50b2tlbl9tYW5hZ2VyJyktPmlnbm9yZU9uSW52YWxpZCgpLAogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBhYnN0cmFjdF9hcmcoJ2F1dGhlbnRpY2F0b3JzJyksCiAgICAgICAgICAgIF0pCiAgICAgICAgLT5hbGlhcyhTZWN1cml0eTo6Y2xhc3MsICdzZWN1cml0eS5oZWxwZXInKQogICAgICAgIC0+YWxpYXMoTGVnYWN5U2VjdXJpdHk6OmNsYXNzLCAnc2VjdXJpdHkuaGVscGVyJykKICAgICAgICAgICAgLT5kZXByZWNhdGUoJ3N5bWZvbnkvc2VjdXJpdHktYnVuZGxlJywgJzYuMicsICdUaGUgIiVhbGlhc19pZCUiIHNlcnZpY2UgYWxpYXMgaXMgZGVwcmVjYXRlZCwgdXNlICInLlNlY3VyaXR5OjpjbGFzcy4nIiBpbnN0ZWFkLicpCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS51c2VyX3ZhbHVlX3Jlc29sdmVyJywgVXNlclZhbHVlUmVzb2x2ZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgnc2VjdXJpdHkudG9rZW5fc3RvcmFnZScpLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPnRhZygnY29udHJvbGxlci5hcmd1bWVudF92YWx1ZV9yZXNvbHZlcicsIFsncHJpb3JpdHknID0+IDEyMCwgJ25hbWUnID0+IFVzZXJWYWx1ZVJlc29sdmVyOjpjbGFzc10pCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS5zZWN1cml0eV90b2tlbl92YWx1ZV9yZXNvbHZlcicsIFNlY3VyaXR5VG9rZW5WYWx1ZVJlc29sdmVyOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3NlY3VyaXR5LnRva2VuX3N0b3JhZ2UnKSwKICAgICAgICAgICAgXSkKICAgICAgICAgICAgLT50YWcoJ2NvbnRyb2xsZXIuYXJndW1lbnRfdmFsdWVfcmVzb2x2ZXInLCBbJ3ByaW9yaXR5JyA9PiAxMjAsICduYW1lJyA9PiBTZWN1cml0eVRva2VuVmFsdWVSZXNvbHZlcjo6Y2xhc3NdKQoKICAgICAgICAvLyBBdXRoZW50aWNhdGlvbiByZWxhdGVkIHNlcnZpY2VzCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5LmF1dGhlbnRpY2F0aW9uLnRydXN0X3Jlc29sdmVyJywgQXV0aGVudGljYXRpb25UcnVzdFJlc29sdmVyOjpjbGFzcykKCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5LmF1dGhlbnRpY2F0aW9uLnNlc3Npb25fc3RyYXRlZ3knLCBTZXNzaW9uQXV0aGVudGljYXRpb25TdHJhdGVneTo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBwYXJhbSgnc2VjdXJpdHkuYXV0aGVudGljYXRpb24uc2Vzc2lvbl9zdHJhdGVneS5zdHJhdGVneScpLAogICAgICAgICAgICAgICAgc2VydmljZSgnc2VjdXJpdHkuY3NyZi50b2tlbl9zdG9yYWdlJyktPmlnbm9yZU9uSW52YWxpZCgpLAogICAgICAgICAgICBdKQogICAgICAgIC0+YWxpYXMoU2Vzc2lvbkF1dGhlbnRpY2F0aW9uU3RyYXRlZ3lJbnRlcmZhY2U6OmNsYXNzLCAnc2VjdXJpdHkuYXV0aGVudGljYXRpb24uc2Vzc2lvbl9zdHJhdGVneScpCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS5hdXRoZW50aWNhdGlvbi5zZXNzaW9uX3N0cmF0ZWd5X25vb3AnLCBTZXNzaW9uQXV0aGVudGljYXRpb25TdHJhdGVneTo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbJ25vbmUnXSkKCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5LnVzZXJfY2hlY2tlcicsIEluTWVtb3J5VXNlckNoZWNrZXI6OmNsYXNzKQoKICAgICAgICAtPnNldCgnc2VjdXJpdHkuZXhwcmVzc2lvbl9sYW5ndWFnZScsIEV4cHJlc3Npb25MYW5ndWFnZTo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbc2VydmljZSgnY2FjaGUuc2VjdXJpdHlfZXhwcmVzc2lvbl9sYW5ndWFnZScpLT5udWxsT25JbnZhbGlkKCldKQoKICAgICAgICAtPnNldCgnc2VjdXJpdHkuYXV0aGVudGljYXRpb25fdXRpbHMnLCBBdXRoZW50aWNhdGlvblV0aWxzOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFtzZXJ2aWNlKCdyZXF1ZXN0X3N0YWNrJyldKQogICAgICAgIC0+YWxpYXMoQXV0aGVudGljYXRpb25VdGlsczo6Y2xhc3MsICdzZWN1cml0eS5hdXRoZW50aWNhdGlvbl91dGlscycpCgogICAgICAgIC8vIEF1dGhvcml6YXRpb24gcmVsYXRlZCBzZXJ2aWNlcwogICAgICAgIC0+c2V0KCdzZWN1cml0eS5hY2Nlc3MuZGVjaXNpb25fbWFuYWdlcicsIEFjY2Vzc0RlY2lzaW9uTWFuYWdlcjo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbW11dKQogICAgICAgIC0+YWxpYXMoQWNjZXNzRGVjaXNpb25NYW5hZ2VySW50ZXJmYWNlOjpjbGFzcywgJ3NlY3VyaXR5LmFjY2Vzcy5kZWNpc2lvbl9tYW5hZ2VyJykKCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5LnJvbGVfaGllcmFyY2h5JywgUm9sZUhpZXJhcmNoeTo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbcGFyYW0oJ3NlY3VyaXR5LnJvbGVfaGllcmFyY2h5LnJvbGVzJyldKQogICAgICAgIC0+YWxpYXMoUm9sZUhpZXJhcmNoeUludGVyZmFjZTo6Y2xhc3MsICdzZWN1cml0eS5yb2xlX2hpZXJhcmNoeScpCgogICAgICAgIC8vIFNlY3VyaXR5IFZvdGVycwogICAgICAgIC0+c2V0KCdzZWN1cml0eS5hY2Nlc3Muc2ltcGxlX3JvbGVfdm90ZXInLCBSb2xlVm90ZXI6OmNsYXNzKQogICAgICAgICAgICAtPnRhZygnc2VjdXJpdHkudm90ZXInLCBbJ3ByaW9yaXR5JyA9PiAyNDVdKQoKICAgICAgICAtPnNldCgnc2VjdXJpdHkuYWNjZXNzLmF1dGhlbnRpY2F0ZWRfdm90ZXInLCBBdXRoZW50aWNhdGVkVm90ZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoW3NlcnZpY2UoJ3NlY3VyaXR5LmF1dGhlbnRpY2F0aW9uLnRydXN0X3Jlc29sdmVyJyldKQogICAgICAgICAgICAtPnRhZygnc2VjdXJpdHkudm90ZXInLCBbJ3ByaW9yaXR5JyA9PiAyNTBdKQoKICAgICAgICAtPnNldCgnc2VjdXJpdHkuYWNjZXNzLnJvbGVfaGllcmFyY2h5X3ZvdGVyJywgUm9sZUhpZXJhcmNoeVZvdGVyOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFtzZXJ2aWNlKCdzZWN1cml0eS5yb2xlX2hpZXJhcmNoeScpXSkKICAgICAgICAgICAgLT50YWcoJ3NlY3VyaXR5LnZvdGVyJywgWydwcmlvcml0eScgPT4gMjQ1XSkKCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5LmFjY2Vzcy5leHByZXNzaW9uX3ZvdGVyJywgRXhwcmVzc2lvblZvdGVyOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3NlY3VyaXR5LmV4cHJlc3Npb25fbGFuZ3VhZ2UnKSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3NlY3VyaXR5LmF1dGhlbnRpY2F0aW9uLnRydXN0X3Jlc29sdmVyJyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZWN1cml0eS5hdXRob3JpemF0aW9uX2NoZWNrZXInKSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3NlY3VyaXR5LnJvbGVfaGllcmFyY2h5JyktPm51bGxPbkludmFsaWQoKSwKICAgICAgICAgICAgXSkKICAgICAgICAgICAgLT50YWcoJ3NlY3VyaXR5LnZvdGVyJywgWydwcmlvcml0eScgPT4gMjQ1XSkKCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5LmltcGVyc29uYXRlX3VybF9nZW5lcmF0b3InLCBJbXBlcnNvbmF0ZVVybEdlbmVyYXRvcjo6Y2xhc3MpCiAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgc2VydmljZSgncmVxdWVzdF9zdGFjaycpLAogICAgICAgICAgICBzZXJ2aWNlKCdzZWN1cml0eS5maXJld2FsbC5tYXAnKSwKICAgICAgICAgICAgc2VydmljZSgnc2VjdXJpdHkudG9rZW5fc3RvcmFnZScpLAogICAgICAgIF0pCgogICAgICAgIC8vIEZpcmV3YWxsIHJlbGF0ZWQgc2VydmljZXMKICAgICAgICAtPnNldCgnc2VjdXJpdHkuZmlyZXdhbGwnLCBGaXJld2FsbExpc3RlbmVyOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3NlY3VyaXR5LmZpcmV3YWxsLm1hcCcpLAogICAgICAgICAgICAgICAgc2VydmljZSgnZXZlbnRfZGlzcGF0Y2hlcicpLAogICAgICAgICAgICAgICAgc2VydmljZSgnc2VjdXJpdHkubG9nb3V0X3VybF9nZW5lcmF0b3InKSwKICAgICAgICAgICAgXSkKICAgICAgICAgICAgLT50YWcoJ2tlcm5lbC5ldmVudF9zdWJzY3JpYmVyJykKICAgICAgICAtPmFsaWFzKEZpcmV3YWxsOjpjbGFzcywgJ3NlY3VyaXR5LmZpcmV3YWxsJykKCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5LmZpcmV3YWxsLm1hcCcsIEZpcmV3YWxsTWFwOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIGFic3RyYWN0X2FyZygnRmlyZXdhbGwgY29udGV4dCBsb2NhdG9yJyksCiAgICAgICAgICAgICAgICBhYnN0cmFjdF9hcmcoJ1JlcXVlc3QgbWF0Y2hlcnMnKSwKICAgICAgICAgICAgXSkKICAgICAgICAtPmFsaWFzKEZpcmV3YWxsTWFwSW50ZXJmYWNlOjpjbGFzcywgJ3NlY3VyaXR5LmZpcmV3YWxsLm1hcCcpCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS5maXJld2FsbC5jb250ZXh0JywgRmlyZXdhbGxDb250ZXh0OjpjbGFzcykKICAgICAgICAgICAgLT5hYnN0cmFjdCgpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBbXSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3NlY3VyaXR5LmV4Y2VwdGlvbl9saXN0ZW5lcicpLAogICAgICAgICAgICAgICAgYWJzdHJhY3RfYXJnKCdMb2dvdXRMaXN0ZW5lcicpLAogICAgICAgICAgICAgICAgYWJzdHJhY3RfYXJnKCdGaXJld2FsbENvbmZpZycpLAogICAgICAgICAgICBdKQoKICAgICAgICAtPnNldCgnc2VjdXJpdHkuZmlyZXdhbGwubGF6eV9jb250ZXh0JywgTGF6eUZpcmV3YWxsQ29udGV4dDo6Y2xhc3MpCiAgICAgICAgICAgIC0+YWJzdHJhY3QoKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgW10sCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZWN1cml0eS5leGNlcHRpb25fbGlzdGVuZXInKSwKICAgICAgICAgICAgICAgIGFic3RyYWN0X2FyZygnTG9nb3V0TGlzdGVuZXInKSwKICAgICAgICAgICAgICAgIGFic3RyYWN0X2FyZygnRmlyZXdhbGxDb25maWcnKSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3NlY3VyaXR5LnVudHJhY2tlZF90b2tlbl9zdG9yYWdlJyksCiAgICAgICAgICAgIF0pCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS5maXJld2FsbC5jb25maWcnLCBGaXJld2FsbENvbmZpZzo6Y2xhc3MpCiAgICAgICAgICAgIC0+YWJzdHJhY3QoKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgYWJzdHJhY3RfYXJnKCduYW1lJyksCiAgICAgICAgICAgICAgICBhYnN0cmFjdF9hcmcoJ3VzZXJfY2hlY2tlcicpLAogICAgICAgICAgICAgICAgYWJzdHJhY3RfYXJnKCdyZXF1ZXN0X21hdGNoZXInKSwKICAgICAgICAgICAgICAgIGZhbHNlLCAvLyBzZWN1cml0eSBlbmFibGVkCiAgICAgICAgICAgICAgICBmYWxzZSwgLy8gc3RhdGVsZXNzCiAgICAgICAgICAgICAgICBudWxsLAogICAgICAgICAgICAgICAgbnVsbCwKICAgICAgICAgICAgICAgIG51bGwsCiAgICAgICAgICAgICAgICBudWxsLAogICAgICAgICAgICAgICAgbnVsbCwKICAgICAgICAgICAgICAgIFtdLCAvLyBsaXN0ZW5lcnMKICAgICAgICAgICAgICAgIG51bGwsIC8vIHN3aXRjaF91c2VyCiAgICAgICAgICAgICAgICBudWxsLCAvLyBsb2dvdXQKICAgICAgICAgICAgXSkKCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5LmxvZ291dF91cmxfZ2VuZXJhdG9yJywgTG9nb3V0VXJsR2VuZXJhdG9yOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3JlcXVlc3Rfc3RhY2snKS0+bnVsbE9uSW52YWxpZCgpLAogICAgICAgICAgICAgICAgc2VydmljZSgncm91dGVyJyktPm51bGxPbkludmFsaWQoKSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3NlY3VyaXR5LnRva2VuX3N0b3JhZ2UnKS0+bnVsbE9uSW52YWxpZCgpLAogICAgICAgICAgICBdKQoKICAgICAgICAtPnNldCgnc2VjdXJpdHkucm91dGVfbG9hZGVyLmxvZ291dCcsIExvZ291dFJvdXRlTG9hZGVyOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgICclc2VjdXJpdHkubG9nb3V0X3VyaXMlJywKICAgICAgICAgICAgICAgICdzZWN1cml0eS5sb2dvdXRfdXJpcycsCiAgICAgICAgICAgIF0pCiAgICAgICAgICAgIC0+dGFnKCdyb3V0aW5nLnJvdXRlX2xvYWRlcicpCgogICAgICAgIC8vIFByb3Zpc2lvbmluZwogICAgICAgIC0+c2V0KCdzZWN1cml0eS51c2VyLnByb3ZpZGVyLm1pc3NpbmcnLCBNaXNzaW5nVXNlclByb3ZpZGVyOjpjbGFzcykKICAgICAgICAgICAgLT5hYnN0cmFjdCgpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBhYnN0cmFjdF9hcmcoJ2ZpcmV3YWxsJyksCiAgICAgICAgICAgIF0pCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS51c2VyLnByb3ZpZGVyLmluX21lbW9yeScsIEluTWVtb3J5VXNlclByb3ZpZGVyOjpjbGFzcykKICAgICAgICAgICAgLT5hYnN0cmFjdCgpCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS51c2VyLnByb3ZpZGVyLmxkYXAnLCBMZGFwVXNlclByb3ZpZGVyOjpjbGFzcykKICAgICAgICAgICAgLT5hYnN0cmFjdCgpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBhYnN0cmFjdF9hcmcoJ3NlY3VyaXR5LmxkYXAubGRhcCcpLAogICAgICAgICAgICAgICAgYWJzdHJhY3RfYXJnKCdiYXNlIGRuJyksCiAgICAgICAgICAgICAgICBhYnN0cmFjdF9hcmcoJ3NlYXJjaCBkbicpLAogICAgICAgICAgICAgICAgYWJzdHJhY3RfYXJnKCdzZWFyY2ggcGFzc3dvcmQnKSwKICAgICAgICAgICAgICAgIGFic3RyYWN0X2FyZygnZGVmYXVsdF9yb2xlcycpLAogICAgICAgICAgICAgICAgYWJzdHJhY3RfYXJnKCd1aWQga2V5JyksCiAgICAgICAgICAgICAgICBhYnN0cmFjdF9hcmcoJ2ZpbHRlcicpLAogICAgICAgICAgICAgICAgYWJzdHJhY3RfYXJnKCdwYXNzd29yZF9hdHRyaWJ1dGUnKSwKICAgICAgICAgICAgICAgIGFic3RyYWN0X2FyZygnZXh0cmFfZmllbGRzIChlbWFpbCBldGMpJyksCiAgICAgICAgICAgIF0pCgogICAgICAgIC0+c2V0KCdzZWN1cml0eS51c2VyLnByb3ZpZGVyLmNoYWluJywgQ2hhaW5Vc2VyUHJvdmlkZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFic3RyYWN0KCkKCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5Lmh0dHBfdXRpbHMnLCBIdHRwVXRpbHM6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgncm91dGVyJyktPm51bGxPbkludmFsaWQoKSwKICAgICAgICAgICAgICAgIHNlcnZpY2UoJ3JvdXRlcicpLT5udWxsT25JbnZhbGlkKCksCiAgICAgICAgICAgIF0pCiAgICAgICAgLT5hbGlhcyhIdHRwVXRpbHM6OmNsYXNzLCAnc2VjdXJpdHkuaHR0cF91dGlscycpCgogICAgICAgIC8vIFZhbGlkYXRvcgogICAgICAgIC0+c2V0KCdzZWN1cml0eS52YWxpZGF0b3IudXNlcl9wYXNzd29yZCcsIFVzZXJQYXNzd29yZFZhbGlkYXRvcjo6Y2xhc3MpCiAgICAgICAgICAgIC0+YXJncyhbCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZWN1cml0eS50b2tlbl9zdG9yYWdlJyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZWN1cml0eS5wYXNzd29yZF9oYXNoZXJfZmFjdG9yeScpLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPnRhZygndmFsaWRhdG9yLmNvbnN0cmFpbnRfdmFsaWRhdG9yJywgWydhbGlhcycgPT4gJ3NlY3VyaXR5LnZhbGlkYXRvci51c2VyX3Bhc3N3b3JkJ10pCgogICAgICAgIC8vIENhY2hlCiAgICAgICAgLT5zZXQoJ2NhY2hlLnNlY3VyaXR5X2V4cHJlc3Npb25fbGFuZ3VhZ2UnKQogICAgICAgICAgICAtPnBhcmVudCgnY2FjaGUuc3lzdGVtJykKICAgICAgICAgICAgLT5wcml2YXRlKCkKICAgICAgICAgICAgLT50YWcoJ2NhY2hlLnBvb2wnKQoKICAgICAgICAvLyBDYWNoZSBXYXJtZXJzCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5LmNhY2hlX3dhcm1lci5leHByZXNzaW9uJywgRXhwcmVzc2lvbkNhY2hlV2FybWVyOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFsKICAgICAgICAgICAgICAgIFtdLAogICAgICAgICAgICAgICAgc2VydmljZSgnc2VjdXJpdHkuZXhwcmVzc2lvbl9sYW5ndWFnZScpLAogICAgICAgICAgICBdKQogICAgICAgICAgICAtPnRhZygna2VybmVsLmNhY2hlX3dhcm1lcicpCgogICAgICAgIC0+c2V0KCdjb250cm9sbGVyLmlzX2dyYW50ZWRfYXR0cmlidXRlX2xpc3RlbmVyJywgSXNHcmFudGVkQXR0cmlidXRlTGlzdGVuZXI6OmNsYXNzKQogICAgICAgICAgICAtPmFyZ3MoWwogICAgICAgICAgICAgICAgc2VydmljZSgnc2VjdXJpdHkuYXV0aG9yaXphdGlvbl9jaGVja2VyJyksCiAgICAgICAgICAgICAgICBzZXJ2aWNlKCdzZWN1cml0eS5pc19ncmFudGVkX2F0dHJpYnV0ZV9leHByZXNzaW9uX2xhbmd1YWdlJyktPm51bGxPbkludmFsaWQoKSwKICAgICAgICAgICAgXSkKICAgICAgICAgICAgLT50YWcoJ2tlcm5lbC5ldmVudF9zdWJzY3JpYmVyJykKCiAgICAgICAgLT5zZXQoJ3NlY3VyaXR5LmlzX2dyYW50ZWRfYXR0cmlidXRlX2V4cHJlc3Npb25fbGFuZ3VhZ2UnLCBCYXNlRXhwcmVzc2lvbkxhbmd1YWdlOjpjbGFzcykKICAgICAgICAgICAgLT5hcmdzKFtzZXJ2aWNlKCdjYWNoZS5zZWN1cml0eV9pc19ncmFudGVkX2F0dHJpYnV0ZV9leHByZXNzaW9uX2xhbmd1YWdlJyktPm51bGxPbkludmFsaWQoKV0pCgogICAgICAgIC0+c2V0KCdjYWNoZS5zZWN1cml0eV9pc19ncmFudGVkX2F0dHJpYnV0ZV9leHByZXNzaW9uX2xhbmd1YWdlJykKICAgICAgICAgICAgLT5wYXJlbnQoJ2NhY2hlLnN5c3RlbScpCiAgICAgICAgICAgIC0+dGFnKCdjYWNoZS5wb29sJykKICAgIDsKfTsKIjtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGRvY0Jsb2NrIjtOO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbWV0YWRhdGEiO2E6MDp7fX0=";