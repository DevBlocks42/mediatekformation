1738044940
84e399b8f2181ccd73394fdeddff1638-phpdoc%3A1010e2ca3ab799db3da277fc22972607-09d15fa93f9f51c697eb7300e748aac1
s:223984:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjM2OiI2NTJlNGYwNjM4MzM2MzQ3ZmQ5YjE4ZjcxZjYwZmFiZC5waHAiO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZXNwYWNlcyI7YTowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbmNsdWRlcyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBmdW5jdGlvbnMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY29uc3RhbnRzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNsYXNzZXMiO2E6MTp7czo0ODoiXF9fVHdpZ1RlbXBsYXRlX2I4MmE2MTMxZWFjNmVlMDg3YzYzN2M3ZDJhMmQwOWQ0IjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXyI6MTU6e3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBpbXBsZW1lbnRzIjthOjA6e31zOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AY29uc3RhbnRzIjthOjA6e31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AcHJvcGVydGllcyI7YToyOntzOjU3OiJcX19Ud2lnVGVtcGxhdGVfYjgyYTYxMzFlYWM2ZWUwODdjNjM3YzdkMmEyZDA5ZDQ6OiRzb3VyY2UiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkiOjEyOntzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB0eXBlcyI7YTowOnt9czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxOTtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTk7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo1NzoiXF9fVHdpZ1RlbXBsYXRlX2I4MmE2MTMxZWFjNmVlMDg3YzYzN2M3ZDJhMmQwOWQ0Ojokc291cmNlIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6Njoic291cmNlIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZG9jQmxvY2siO047czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZGVmYXVsdCI7TjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBzdGF0aWMiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB0eXBlIjtOO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AHJlYWRPbmx5IjtiOjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAbWV0YWRhdGEiO2E6MDp7fXM6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGF0dHJpYnV0ZXMiO2E6MDp7fX1zOjU3OiJcX19Ud2lnVGVtcGxhdGVfYjgyYTYxMzFlYWM2ZWUwODdjNjM3YzdkMmEyZDA5ZDQ6OiRtYWNyb3MiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkiOjEyOntzOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQB0eXBlcyI7YTowOnt9czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NzoicHJpdmF0ZSI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToyMDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTowO31zOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo1NzoiXF9fVHdpZ1RlbXBsYXRlX2I4MmE2MTMxZWFjNmVlMDg3YzYzN2M3ZDJhMmQwOWQ0OjokbWFjcm9zIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6NjoibWFjcm9zIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZG9jQmxvY2siO047czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAZGVmYXVsdCI7czoyOiJbXSI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAc3RhdGljIjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcUHJvcGVydHkAdHlwZSI7TjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQByZWFkT25seSI7YjowO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFByb3BlcnR5AG1ldGFkYXRhIjthOjA6e31zOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxQcm9wZXJ0eQBhdHRyaWJ1dGVzIjthOjA6e319fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBtZXRob2RzIjthOjEyOntzOjYzOiJcX19Ud2lnVGVtcGxhdGVfYjgyYTYxMzFlYWM2ZWUwODdjNjM3YzdkMmEyZDA5ZDQ6Ol9fY29uc3RydWN0KCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjoxMzp7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToxOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE9iamVjdF8iOjE6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcT2JqZWN0XwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjE3OiJcVHdpZ1xFbnZpcm9ubWVudCI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjExOiJFbnZpcm9ubWVudCI7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjM6ImVudiI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjI7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6NTUwO31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjM0O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjkyNTt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2MzoiXF9fVHdpZ1RlbXBsYXRlX2I4MmE2MTMxZWFjNmVlMDg3YzYzN2M3ZDJhMmQwOWQ0OjpfX2NvbnN0cnVjdCgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTE6Il9fY29uc3RydWN0Ijt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGhhc1JldHVybkJ5UmVmZXJlbmNlIjtiOjA7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAG1ldGFkYXRhIjthOjA6e31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXR0cmlidXRlcyI7YTowOnt9fXM6NjM6IlxfX1R3aWdUZW1wbGF0ZV9iODJhNjEzMWVhYzZlZTA4N2M2MzdjN2QyYTJkMDlkNDo6ZG9HZXRQYXJlbnQoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjEzOntzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjE6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQXJyYXlfIjozOntzOjEyOiIAKgB2YWx1ZVR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtOO3M6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjI6e3M6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fXM6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdG9rZW4iO3M6MToifCI7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjc6ImNvbnRleHQiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjM2O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjkzMjt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo0MDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aToxNDg3O31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjYzOiJcX19Ud2lnVGVtcGxhdGVfYjgyYTYxMzFlYWM2ZWUwODdjNjM3YzdkMmEyZDA5ZDQ6OmRvR2V0UGFyZW50KCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiZG9HZXRQYXJlbnQiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6OToicHJvdGVjdGVkIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhdHRyaWJ1dGVzIjthOjA6e319czo2MToiXF9fVHdpZ1RlbXBsYXRlX2I4MmE2MTMxZWFjNmVlMDg3YzYzN2M3ZDJhMmQwOWQ0Ojpkb0Rpc3BsYXkoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjEzOntzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjI6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQXJyYXlfIjozOntzOjEyOiIAKgB2YWx1ZVR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtOO3M6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjI6e3M6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fXM6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdG9rZW4iO3M6MToifCI7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjc6ImNvbnRleHQiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fWk6MTtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQXJyYXlfIjozOntzOjEyOiIAKgB2YWx1ZVR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjEwOiIAKgBrZXlUeXBlIjtOO3M6MTc6IgAqAGRlZmF1bHRLZXlUeXBlIjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29tcG91bmQiOjI6e3M6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdHlwZXMiO2E6Mjp7aTowO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xTdHJpbmdfIjowOnt9aToxO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xJbnRlZ2VyIjowOnt9fXM6NTI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQWdncmVnYXRlZFR5cGUAdG9rZW4iO3M6MToifCI7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjY6ImJsb2NrcyI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7czoyOiJbXSI7czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjQyO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjE0OTQ7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6NjE7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6Mjc1NTt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2MToiXF9fVHdpZ1RlbXBsYXRlX2I4MmE2MTMxZWFjNmVlMDg3YzYzN2M3ZDJhMmQwOWQ0Ojpkb0Rpc3BsYXkoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjk6ImRvRGlzcGxheSI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo5OiJwcm90ZWN0ZWQiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABtZXRhZGF0YSI7YTowOnt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGF0dHJpYnV0ZXMiO2E6MDp7fX1zOjY1OiJcX19Ud2lnVGVtcGxhdGVfYjgyYTYxMzFlYWM2ZWUwODdjNjM3YzdkMmEyZDA5ZDQ6OmJsb2NrX3Rvb2xiYXIoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjEzOntzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjI6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo3OiJjb250ZXh0IjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjE7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFycmF5XyI6Mzp7czoxMjoiACoAdmFsdWVUeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czoxMDoiACoAa2V5VHlwZSI7TjtzOjE3OiIAKgBkZWZhdWx0S2V5VHlwZSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kIjoyOntzOjUyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFnZ3JlZ2F0ZWRUeXBlAHR5cGVzIjthOjI6e2k6MDtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fWk6MTtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fX1zOjUyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFnZ3JlZ2F0ZWRUeXBlAHRva2VuIjtzOjE6InwiO319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo2OiJibG9ja3MiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6MjoiW10iO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTo2NDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aToyNzc2O31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjIyNztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aToxNzYzODt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NToiXF9fVHdpZ1RlbXBsYXRlX2I4MmE2MTMxZWFjNmVlMDg3YzYzN2M3ZDJhMmQwOWQ0OjpibG9ja190b29sYmFyKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMzoiYmxvY2tfdG9vbGJhciI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABtZXRhZGF0YSI7YTowOnt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGF0dHJpYnV0ZXMiO2E6MDp7fX1zOjYyOiJcX19Ud2lnVGVtcGxhdGVfYjgyYTYxMzFlYWM2ZWUwODdjNjM3YzdkMmEyZDA5ZDQ6OmJsb2NrX21lbnUoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjEzOntzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjI6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo3OiJjb250ZXh0IjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjE7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFycmF5XyI6Mzp7czoxMjoiACoAdmFsdWVUeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czoxMDoiACoAa2V5VHlwZSI7TjtzOjE3OiIAKgBkZWZhdWx0S2V5VHlwZSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kIjoyOntzOjUyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFnZ3JlZ2F0ZWRUeXBlAHR5cGVzIjthOjI6e2k6MDtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fWk6MTtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fX1zOjUyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFnZ3JlZ2F0ZWRUeXBlAHRva2VuIjtzOjE6InwiO319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo2OiJibG9ja3MiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6MjoiW10iO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToyMzA7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MTc2NjA7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MjcyO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjIxMDM5O31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjYyOiJcX19Ud2lnVGVtcGxhdGVfYjgyYTYxMzFlYWM2ZWUwODdjNjM3YzdkMmEyZDA5ZDQ6OmJsb2NrX21lbnUoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjEwOiJibG9ja19tZW51Ijt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYWJzdHJhY3QiO2I6MDtzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAc3RhdGljIjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZpbmFsIjtiOjA7czo1NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGhhc1JldHVybkJ5UmVmZXJlbmNlIjtiOjA7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAG1ldGFkYXRhIjthOjA6e31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXR0cmlidXRlcyI7YTowOnt9fXM6NjM6IlxfX1R3aWdUZW1wbGF0ZV9iODJhNjEzMWVhYzZlZTA4N2M2MzdjN2QyYTJkMDlkNDo6YmxvY2tfcGFuZWwoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjEzOntzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjI6e2k6MDtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo3OiJjb250ZXh0IjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjE7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFycmF5XyI6Mzp7czoxMjoiACoAdmFsdWVUeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czoxMDoiACoAa2V5VHlwZSI7TjtzOjE3OiIAKgBkZWZhdWx0S2V5VHlwZSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbXBvdW5kIjoyOntzOjUyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFnZ3JlZ2F0ZWRUeXBlAHR5cGVzIjthOjI6e2k6MDtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcU3RyaW5nXyI6MDp7fWk6MTtPOjM4OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcSW50ZWdlciI6MDp7fX1zOjUyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEFnZ3JlZ2F0ZWRUeXBlAHRva2VuIjtzOjE6InwiO319czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czo2OiJibG9ja3MiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6MjoiW10iO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToyNzU7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MjEwNjE7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MzEwO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjI0MDIxO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjYzOiJcX19Ud2lnVGVtcGxhdGVfYjgyYTYxMzFlYWM2ZWUwODdjNjM3YzdkMmEyZDA5ZDQ6OmJsb2NrX3BhbmVsKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiYmxvY2tfcGFuZWwiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhdHRyaWJ1dGVzIjthOjA6e319czo2NToiXF9fVHdpZ1RlbXBsYXRlX2I4MmE2MTMxZWFjNmVlMDg3YzYzN2M3ZDJhMmQwOWQ0OjpibG9ja19xdWVyaWVzKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjoxMzp7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YToyOntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NzoiY29udGV4dCI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7TjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aToxO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBcnJheV8iOjM6e3M6MTI6IgAqAHZhbHVlVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6MTA6IgAqAGtleVR5cGUiO047czoxNzoiACoAZGVmYXVsdEtleVR5cGUiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb21wb3VuZCI6Mjp7czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0eXBlcyI7YToyOntpOjA7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXFN0cmluZ18iOjA6e31pOjE7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXEludGVnZXIiOjA6e319czo1MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xBZ2dyZWdhdGVkVHlwZQB0b2tlbiI7czoxOiJ8Ijt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6NjoiYmxvY2tzIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtzOjI6IltdIjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MzEzO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjI0MDQzO31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjEyMjI7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6OTYwMjc7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjU6IlxfX1R3aWdUZW1wbGF0ZV9iODJhNjEzMWVhYzZlZTA4N2M2MzdjN2QyYTJkMDlkNDo6YmxvY2tfcXVlcmllcygpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MTM6ImJsb2NrX3F1ZXJpZXMiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhdHRyaWJ1dGVzIjthOjA6e319czo3NzoiXF9fVHdpZ1RlbXBsYXRlX2I4MmE2MTMxZWFjNmVlMDg3YzYzN2M3ZDJhMmQwOWQ0OjptYWNyb19yZW5kZXJfc2ltcGxlX3RhYmxlKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjoxMzp7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTo0OntpOjA7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6MTA6Il9fbGFiZWwxX18iO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGRlZmF1bHQiO3M6NDoibnVsbCI7czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAYnlSZWZlcmVuY2UiO2I6MDtzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABpc1ZhcmlhZGljIjtiOjA7fWk6MTtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50Ijo1OntzOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudAB0eXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAbmFtZSI7czoxMDoiX19sYWJlbDJfXyI7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAZGVmYXVsdCI7czo0OiJudWxsIjtzOjUwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABieVJlZmVyZW5jZSI7YjowO3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGlzVmFyaWFkaWMiO2I6MDt9aToyO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQiOjU6e3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AHR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABuYW1lIjtzOjg6Il9fZGF0YV9fIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtzOjQ6Im51bGwiO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjowO31pOjM7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudCI6NTp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAdHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AG5hbWUiO3M6MTE6Il9fdmFyYXJnc19fIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxBcmd1bWVudABkZWZhdWx0IjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEFyZ3VtZW50AGJ5UmVmZXJlbmNlIjtiOjA7czo0OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQXJndW1lbnQAaXNWYXJpYWRpYyI7YjoxO319czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxMjI1O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjk2MDUwO31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjEyOTI7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6OTk3NzE7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6Nzc6IlxfX1R3aWdUZW1wbGF0ZV9iODJhNjEzMWVhYzZlZTA4N2M2MzdjN2QyYTJkMDlkNDo6bWFjcm9fcmVuZGVyX3NpbXBsZV90YWJsZSgpIjtzOjM2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAG5hbWUiO3M6MjU6Im1hY3JvX3JlbmRlcl9zaW1wbGVfdGFibGUiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtOO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhdHRyaWJ1dGVzIjthOjA6e319czo2NzoiXF9fVHdpZ1RlbXBsYXRlX2I4MmE2MTMxZWFjNmVlMDg3YzYzN2M3ZDJhMmQwOWQ0OjpnZXRUZW1wbGF0ZU5hbWUoKSI7TzozNToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QiOjEzOntzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAYXJndW1lbnRzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjEyOTc7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6OTk4MjE7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTMwMDtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aTo5OTkxNjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2NzoiXF9fVHdpZ1RlbXBsYXRlX2I4MmE2MTMxZWFjNmVlMDg3YzYzN2M3ZDJhMmQwOWQ0OjpnZXRUZW1wbGF0ZU5hbWUoKSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjE1OiJnZXRUZW1wbGF0ZU5hbWUiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2siOjc6e3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAc3VtbWFyeSI7czowOiIiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6MTp7aTowO086NDY6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEdlbmVyaWMiOjI6e3M6NzoiACoAbmFtZSI7czoxODoiY29kZUNvdmVyYWdlSWdub3JlIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tjt9fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAY29udGV4dCI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQiOjI6e3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2UiO3M6MDoiIjtzOjU2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlQWxpYXNlcyI7YTowOnt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAbG9jYXRpb24iO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlU3RhcnQiO2I6MDtzOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVFbmQiO2I6MDt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABtZXRhZGF0YSI7YTowOnt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGF0dHJpYnV0ZXMiO2E6MDp7fX1zOjYzOiJcX19Ud2lnVGVtcGxhdGVfYjgyYTYxMzFlYWM2ZWUwODdjNjM3YzdkMmEyZDA5ZDQ6OmlzVHJhaXRhYmxlKCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjoxMzp7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxMzA1O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjk5OTY2O31zOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZW5kTG9jYXRpb24iO086MzM6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbiI6Mjp7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBsaW5lTnVtYmVyIjtpOjEzMDg7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MTAwMDI4O31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAcmV0dXJuVHlwZSI7TzozNzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXE1peGVkXyI6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjYzOiJcX19Ud2lnVGVtcGxhdGVfYjgyYTYxMzFlYWM2ZWUwODdjNjM3YzdkMmEyZDA5ZDQ6OmlzVHJhaXRhYmxlKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMToiaXNUcmFpdGFibGUiO31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAdmlzaWJpbGl0eSI7TzozOToicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5IjoxOntzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxWaXNpYmlsaXR5AHZpc2liaWxpdHkiO3M6NjoicHVibGljIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGRvY0Jsb2NrIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2siOjc6e3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAc3VtbWFyeSI7czowOiIiO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MDoiIjtzOjUxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrXERlc2NyaXB0aW9uAHRhZ3MiO2E6MDp7fX1zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHRhZ3MiO2E6MTp7aTowO086NDY6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xUYWdzXEdlbmVyaWMiOjI6e3M6NzoiACoAbmFtZSI7czoxODoiY29kZUNvdmVyYWdlSWdub3JlIjtzOjE0OiIAKgBkZXNjcmlwdGlvbiI7Tjt9fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAY29udGV4dCI7TzozODoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQiOjI6e3M6NDk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcQ29udGV4dABuYW1lc3BhY2UiO3M6MDoiIjtzOjU2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlQWxpYXNlcyI7YTowOnt9fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAbG9jYXRpb24iO047czo1MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlU3RhcnQiO2I6MDtzOjQ4OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGlzVGVtcGxhdGVFbmQiO2I6MDt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABtZXRhZGF0YSI7YTowOnt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGF0dHJpYnV0ZXMiO2E6MDp7fX1zOjY0OiJcX19Ud2lnVGVtcGxhdGVfYjgyYTYxMzFlYWM2ZWUwODdjNjM3YzdkMmEyZDA5ZDQ6OmdldERlYnVnSW5mbygpIjtPOjM1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZCI6MTM6e3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhcmd1bWVudHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTMxMztzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aToxMDAwNzg7fXM6NDg6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABlbmRMb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTMxNjtzOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGNvbHVtbk51bWJlciI7aToxMDI5NDY7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAByZXR1cm5UeXBlIjtPOjM3OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cVHlwZXNcTWl4ZWRfIjowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGZxc2VuIjtPOjMwOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4iOjI6e3M6Mzc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AZnFzZW4iO3M6NjQ6IlxfX1R3aWdUZW1wbGF0ZV9iODJhNjEzMWVhYzZlZTA4N2M2MzdjN2QyYTJkMDlkNDo6Z2V0RGVidWdJbmZvKCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxMjoiZ2V0RGVidWdJbmZvIjt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHZpc2liaWxpdHkiO086Mzk6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eSI6MTp7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcVmlzaWJpbGl0eQB2aXNpYmlsaXR5IjtzOjY6InB1YmxpYyI7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6MDoiIjtzOjQ2OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGRlc2NyaXB0aW9uIjtPOjQ1OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24iOjI6e3M6NTk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcRGVzY3JpcHRpb24AYm9keVRlbXBsYXRlIjtzOjA6IiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjE6e2k6MDtPOjQ2OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2tcVGFnc1xHZW5lcmljIjoyOntzOjc6IgAqAG5hbWUiO3M6MTg6ImNvZGVDb3ZlcmFnZUlnbm9yZSI7czoxNDoiACoAZGVzY3JpcHRpb24iO047fX1zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0IjoyOntzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlIjtzOjA6IiI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZUFsaWFzZXMiO2E6MDp7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtOO3M6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhYnN0cmFjdCI7YjowO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABzdGF0aWMiO2I6MDtzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZmluYWwiO2I6MDtzOjU3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAaGFzUmV0dXJuQnlSZWZlcmVuY2UiO2I6MDtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAbWV0YWRhdGEiO2E6MDp7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABhdHRyaWJ1dGVzIjthOjA6e319czo2ODoiXF9fVHdpZ1RlbXBsYXRlX2I4MmE2MTMxZWFjNmVlMDg3YzYzN2M3ZDJhMmQwOWQ0OjpnZXRTb3VyY2VDb250ZXh0KCkiO086MzU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kIjoxMzp7czo0NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFyZ3VtZW50cyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxMzE4O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjEwMjk1Mzt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxODU0O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjEzMDk5MDt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHJldHVyblR5cGUiO086Mzc6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xNaXhlZF8iOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZnFzZW4iO086MzA6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbiI6Mjp7czozNzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBmcXNlbiI7czo2ODoiXF9fVHdpZ1RlbXBsYXRlX2I4MmE2MTMxZWFjNmVlMDg3YzYzN2M3ZDJhMmQwOWQ0OjpnZXRTb3VyY2VDb250ZXh0KCkiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czoxNjoiZ2V0U291cmNlQ29udGV4dCI7fXM6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZAB2aXNpYmlsaXR5IjtPOjM5OiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkiOjE6e3M6NTE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXFZpc2liaWxpdHkAdmlzaWJpbGl0eSI7czo2OiJwdWJsaWMiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxNZXRob2QAZG9jQmxvY2siO047czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGFic3RyYWN0IjtiOjA7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAHN0YXRpYyI7YjowO3M6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABmaW5hbCI7YjowO3M6NTc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABoYXNSZXR1cm5CeVJlZmVyZW5jZSI7YjowO3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXE1ldGhvZABtZXRhZGF0YSI7YTowOnt9czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcTWV0aG9kAGF0dHJpYnV0ZXMiO2E6MDp7fX19czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHVzZWRUcmFpdHMiO2E6MDp7fXM6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBsb2NhdGlvbiI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uIjoyOntzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXExvY2F0aW9uAGxpbmVOdW1iZXIiO2k6MTc7czo0NzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxMb2NhdGlvbgBjb2x1bW5OdW1iZXIiO2k6MDt9czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGVuZExvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aToxODU1O3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXENsYXNzXwBmcXNlbiI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjQ4OiJcX19Ud2lnVGVtcGxhdGVfYjgyYTYxMzFlYWM2ZWUwODdjNjM3YzdkMmEyZDA5ZDQiO3M6MzY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRnFzZW4AbmFtZSI7czo0NzoiX19Ud2lnVGVtcGxhdGVfYjgyYTYxMzFlYWM2ZWUwODdjNjM3YzdkMmEyZDA5ZDQiO31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AZG9jQmxvY2siO047czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHBhcmVudCI7TzozMDoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuIjoyOntzOjM3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXEZxc2VuAGZxc2VuIjtzOjE0OiJcVHdpZ1xUZW1wbGF0ZSI7czozNjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxGcXNlbgBuYW1lIjtzOjg6IlRlbXBsYXRlIjt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGFic3RyYWN0IjtiOjA7czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAGZpbmFsIjtiOjA7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAHJlYWRPbmx5IjtiOjA7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcQ2xhc3NfAG1ldGFkYXRhIjthOjA6e31zOjQ3OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxDbGFzc18AYXR0cmlidXRlcyI7YTowOnt9fX1zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e31zOjQwOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGVudW1zIjthOjA6e31zOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGhhc2giO3M6MzI6IjA5ZDE1ZmE5M2Y5ZjUxYzY5N2ViNzMwMGU3NDhhYWMxIjtzOjM5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHBhdGgiO3M6NTg6InZhci9jYWNoZS9kZXYvdHdpZy82NS82NTJlNGYwNjM4MzM2MzQ3ZmQ5YjE4ZjcxZjYwZmFiZC5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjEzMDk5NDoiPD9waHAKCnVzZSBUd2lnXEVudmlyb25tZW50Owp1c2UgVHdpZ1xFcnJvclxMb2FkZXJFcnJvcjsKdXNlIFR3aWdcRXJyb3JcUnVudGltZUVycm9yOwp1c2UgVHdpZ1xFeHRlbnNpb25cQ29yZUV4dGVuc2lvbjsKdXNlIFR3aWdcRXh0ZW5zaW9uXFNhbmRib3hFeHRlbnNpb247CnVzZSBUd2lnXE1hcmt1cDsKdXNlIFR3aWdcU2FuZGJveFxTZWN1cml0eUVycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZFRhZ0Vycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZEZpbHRlckVycm9yOwp1c2UgVHdpZ1xTYW5kYm94XFNlY3VyaXR5Tm90QWxsb3dlZEZ1bmN0aW9uRXJyb3I7CnVzZSBUd2lnXFNvdXJjZTsKdXNlIFR3aWdcVGVtcGxhdGU7CgovKiBARG9jdHJpbmUvQ29sbGVjdG9yL2RiLmh0bWwudHdpZyAqLwpjbGFzcyBfX1R3aWdUZW1wbGF0ZV9iODJhNjEzMWVhYzZlZTA4N2M2MzdjN2QyYTJkMDlkNCBleHRlbmRzIFRlbXBsYXRlCnsKICAgIHByaXZhdGUgJHNvdXJjZTsKICAgIHByaXZhdGUgJG1hY3JvcyA9IFtdOwoKICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdChFbnZpcm9ubWVudCAkZW52KQogICAgewogICAgICAgIHBhcmVudDo6X19jb25zdHJ1Y3QoJGVudik7CgogICAgICAgICR0aGlzLT5zb3VyY2UgPSAkdGhpcy0+Z2V0U291cmNlQ29udGV4dCgpOwoKICAgICAgICAkdGhpcy0+YmxvY2tzID0gWwogICAgICAgICAgICAndG9vbGJhcicgPT4gWyR0aGlzLCAnYmxvY2tfdG9vbGJhciddLAogICAgICAgICAgICAnbWVudScgPT4gWyR0aGlzLCAnYmxvY2tfbWVudSddLAogICAgICAgICAgICAncGFuZWwnID0+IFskdGhpcywgJ2Jsb2NrX3BhbmVsJ10sCiAgICAgICAgICAgICdxdWVyaWVzJyA9PiBbJHRoaXMsICdibG9ja19xdWVyaWVzJ10sCiAgICAgICAgXTsKICAgIH0KCiAgICBwcm90ZWN0ZWQgZnVuY3Rpb24gZG9HZXRQYXJlbnQoYXJyYXkgJGNvbnRleHQpCiAgICB7CiAgICAgICAgLy8gbGluZSAxCiAgICAgICAgcmV0dXJuICR0aGlzLT5sb2FkVGVtcGxhdGUoKChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJyZXF1ZXN0Il0pIHx8IGFycmF5X2tleV9leGlzdHMoInJlcXVlc3QiLCAkY29udGV4dCkgPyAkY29udGV4dFsicmVxdWVzdCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInJlcXVlc3QiIGRvZXMgbm90IGV4aXN0LicsIDEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImlzWG1sSHR0cFJlcXVlc3QiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDEpKSA/ICgiQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL2FqYXhfbGF5b3V0Lmh0bWwudHdpZyIpIDogKCJAV2ViUHJvZmlsZXIvUHJvZmlsZXIvbGF5b3V0Lmh0bWwudHdpZyIpKSwgIkBEb2N0cmluZS9Db2xsZWN0b3IvZGIuaHRtbC50d2lnIiwgMSk7CiAgICB9CgogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIGRvRGlzcGxheShhcnJheSAkY29udGV4dCwgYXJyYXkgJGJsb2NrcyA9IFtdKQogICAgewogICAgICAgICRtYWNyb3MgPSAkdGhpcy0+bWFjcm9zOwogICAgICAgICRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJ1bmRsZVxcV2ViUHJvZmlsZXJCdW5kbGVcXFR3aWdcXFdlYlByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDItPmVudGVyKCRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJ0ZW1wbGF0ZSIsICJARG9jdHJpbmUvQ29sbGVjdG9yL2RiLmh0bWwudHdpZyIpKTsKCiAgICAgICAgJF9faW50ZXJuYWxfNmY0N2JiZTk5ODNhZjgxZjFlNzQ1MGU5YTNlMzc2OGYgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnJpZGdlXFxUd2lnXFxFeHRlbnNpb25cXFByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfNmY0N2JiZTk5ODNhZjgxZjFlNzQ1MGU5YTNlMzc2OGYtPmVudGVyKCRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJ0ZW1wbGF0ZSIsICJARG9jdHJpbmUvQ29sbGVjdG9yL2RiLmh0bWwudHdpZyIpKTsKCiAgICAgICAgLy8gbGluZSAzCiAgICAgICAgJG1hY3Jvc1siaGVscGVyIl0gPSAkdGhpcy0+bWFjcm9zWyJoZWxwZXIiXSA9ICR0aGlzOwogICAgICAgIC8vIGxpbmUgMQogICAgICAgIHlpZWxkIGZyb20gJHRoaXMtPmdldFBhcmVudCgkY29udGV4dCktPnVud3JhcCgpLT55aWVsZCgkY29udGV4dCwgYXJyYXlfbWVyZ2UoJHRoaXMtPmJsb2NrcywgJGJsb2NrcykpOwogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyLT5sZWF2ZSgkX19pbnRlcm5hbF81YTI3YThiYTIxY2E3OWI2MTkzMjM3NmIyZmE5MjJkMl9wcm9mKTsKCiAgICAgICAgCiAgICAgICAgJF9faW50ZXJuYWxfNmY0N2JiZTk5ODNhZjgxZjFlNzQ1MGU5YTNlMzc2OGYtPmxlYXZlKCRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmX3Byb2YpOwoKICAgIH0KCiAgICAvLyBsaW5lIDUKICAgIHB1YmxpYyBmdW5jdGlvbiBibG9ja190b29sYmFyKCRjb250ZXh0LCBhcnJheSAkYmxvY2tzID0gW10pCiAgICB7CiAgICAgICAgJG1hY3JvcyA9ICR0aGlzLT5tYWNyb3M7CiAgICAgICAgJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDIgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnVuZGxlXFxXZWJQcm9maWxlckJ1bmRsZVxcVHdpZ1xcV2ViUHJvZmlsZXJFeHRlbnNpb24iXTsKICAgICAgICAkX19pbnRlcm5hbF81YTI3YThiYTIxY2E3OWI2MTkzMjM3NmIyZmE5MjJkMi0+ZW50ZXIoJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDJfcHJvZiA9IG5ldyBcVHdpZ1xQcm9maWxlclxQcm9maWxlKCR0aGlzLT5nZXRUZW1wbGF0ZU5hbWUoKSwgImJsb2NrIiwgInRvb2xiYXIiKSk7CgogICAgICAgICRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJyaWRnZVxcVHdpZ1xcRXh0ZW5zaW9uXFxQcm9maWxlckV4dGVuc2lvbiJdOwogICAgICAgICRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmLT5lbnRlcigkX19pbnRlcm5hbF82ZjQ3YmJlOTk4M2FmODFmMWU3NDUwZTlhM2UzNzY4Zl9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAiYmxvY2siLCAidG9vbGJhciIpKTsKCiAgICAgICAgLy8gbGluZSA2CiAgICAgICAgeWllbGQgIiAgICAiOwogICAgICAgIGlmICgoKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA2LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJxdWVyeWNvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA2KSA+IDApIHx8IChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaW52YWxpZEVudGl0eUNvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA2KSA+IDApKSkgewogICAgICAgICAgICAvLyBsaW5lIDcKICAgICAgICAgICAgeWllbGQgIgogICAgICAgICI7CiAgICAgICAgICAgIC8vIGxpbmUgOAogICAgICAgICAgICAkY29udGV4dFsiaWNvbiJdID0gKCcnID09PSAkdG1wID0gXFR3aWdcRXh0ZW5zaW9uXENvcmVFeHRlbnNpb246OmNhcHR1cmVPdXRwdXQoKGZ1bmN0aW9uICgpIHVzZSAoJiRjb250ZXh0LCAkbWFjcm9zLCAkYmxvY2tzKSB7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDkKICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgJGNvbnRleHRbInN0YXR1cyJdID0gKCgoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImludmFsaWRFbnRpdHlDb3VudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgOSkgPiAwKSkgPyAoInJlZCIpIDogKCgoKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA5LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJxdWVyeWNvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA5KSA+IDUwKSkgPyAoInllbGxvdyIpIDogKCIiKSkpKTsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMTAKICAgICAgICAgICAgICAgIHlpZWxkICIKICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMTEKICAgICAgICAgICAgICAgIGlmICgoKGlzc2V0KCRjb250ZXh0WyJwcm9maWxlcl9tYXJrdXBfdmVyc2lvbiJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJwcm9maWxlcl9tYXJrdXBfdmVyc2lvbiIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJwcm9maWxlcl9tYXJrdXBfdmVyc2lvbiJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInByb2ZpbGVyX21hcmt1cF92ZXJzaW9uIiBkb2VzIG5vdCBleGlzdC4nLCAxMSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpID49IDMpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAxMgogICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICB5aWVsZCBUd2lnXEV4dGVuc2lvblxDb3JlRXh0ZW5zaW9uOjppbmNsdWRlKCR0aGlzLT5lbnYsICRjb250ZXh0LCAiQERvY3RyaW5lL0NvbGxlY3Rvci9kYXRhYmFzZS5zdmciKTsKICAgICAgICAgICAgICAgICAgICB5aWVsZCAiCiAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMTQKICAgICAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvblwiPiI7CiAgICAgICAgICAgICAgICAgICAgeWllbGQgVHdpZ1xFeHRlbnNpb25cQ29yZUV4dGVuc2lvbjo6aW5jbHVkZSgkdGhpcy0+ZW52LCAkY29udGV4dCwgIkBEb2N0cmluZS9Db2xsZWN0b3IvaWNvbi5zdmciKTsKICAgICAgICAgICAgICAgICAgICB5aWVsZCAiPC9zcGFuPgogICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gbGluZSAxNgogICAgICAgICAgICAgICAgeWllbGQgIgogICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgLy8gbGluZSAxNwogICAgICAgICAgICAgICAgaWYgKCgoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDE3LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJxdWVyeWNvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNykgPT0gMCkgJiYgKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxNywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaW52YWxpZEVudGl0eUNvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNykgPiAwKSkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDE4CiAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItdmFsdWVcIj4iOwogICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDE4LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJpbnZhbGlkRW50aXR5Q291bnQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE4KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICB5aWVsZCAiPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLWxhYmVsXCI+ZXJyb3JzPC9zcGFuPgogICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIxCiAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItdmFsdWVcIj4iOwogICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDIxLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJxdWVyeWNvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgeWllbGQgIjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlLWFkZGl0aW9uYWwtZGV0YWlsXCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLWxhYmVsXCI+aW48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXZhbHVlXCI+IjsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI0CiAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShUd2lnXEV4dGVuc2lvblxDb3JlRXh0ZW5zaW9uOjpzcHJpbnRmKCIlMC4yZiIsIChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMjQsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInRpbWUiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI0KSAqIDEwMDApKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICB5aWVsZCAiPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1sYWJlbFwiPm1zPC9zcGFuPgogICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gbGluZSAyOAogICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgIjsKICAgICAgICAgICAgICAgIHJldHVybjsgeWllbGQgJyc7CiAgICAgICAgICAgIH0pKCkpKSA/ICcnIDogbmV3IE1hcmt1cCgkdG1wLCAkdGhpcy0+ZW52LT5nZXRDaGFyc2V0KCkpOwogICAgICAgICAgICAvLyBsaW5lIDI5CiAgICAgICAgICAgIHlpZWxkICIKICAgICAgICAiOwogICAgICAgICAgICAvLyBsaW5lIDMwCiAgICAgICAgICAgICRjb250ZXh0WyJ0ZXh0Il0gPSAoJycgPT09ICR0bXAgPSBcVHdpZ1xFeHRlbnNpb25cQ29yZUV4dGVuc2lvbjo6Y2FwdHVyZU91dHB1dCgoZnVuY3Rpb24gKCkgdXNlICgmJGNvbnRleHQsICRtYWNyb3MsICRibG9ja3MpIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMzEKICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICA8Yj5EYXRhYmFzZSBRdWVyaWVzPC9iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXN0YXR1cyAiOwogICAgICAgICAgICAgICAgLy8gbGluZSAzMwogICAgICAgICAgICAgICAgeWllbGQgKCgoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDMzLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJxdWVyeWNvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzMykgPiA1MCkpID8gKCJzZi10b29sYmFyLXN0YXR1cy15ZWxsb3ciKSA6ICgiIikpOwogICAgICAgICAgICAgICAgeWllbGQgIlwiPiI7CiAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzMywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicXVlcnljb3VudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzMpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgeWllbGQgIjwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgIDxiPkRpZmZlcmVudCBzdGF0ZW1lbnRzPC9iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXN0YXR1c1wiPiI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDM3CiAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzNywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZ3JvdXBlZFF1ZXJ5Q291bnQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM3KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIHlpZWxkICI8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICA8Yj5RdWVyeSB0aW1lPC9iPgogICAgICAgICAgICAgICAgPHNwYW4+IjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgNDEKICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoVHdpZ1xFeHRlbnNpb25cQ29yZUV4dGVuc2lvbjo6c3ByaW50ZigiJTAuMmYiLCAoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDQxLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJ0aW1lIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA0MSkgKiAxMDAwKSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB5aWVsZCAiIG1zPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgPGI+SW52YWxpZCBlbnRpdGllczwvYj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1zdGF0dXMgIjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgNDUKICAgICAgICAgICAgICAgIHlpZWxkICgoKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA0NSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiaW52YWxpZEVudGl0eUNvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA0NSkgPiAwKSkgPyAoInNmLXRvb2xiYXItc3RhdHVzLXJlZCIpIDogKCIiKSk7CiAgICAgICAgICAgICAgICB5aWVsZCAiXCI+IjsKICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDQ1LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJpbnZhbGlkRW50aXR5Q291bnQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDQ1KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIHlpZWxkICI8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgLy8gbGluZSA0NwogICAgICAgICAgICAgICAgaWYgKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA0NywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY2FjaGVFbmFibGVkIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA0NykpIHsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDQ4CiAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICAgICAgPGI+Q2FjaGUgaGl0czwvYj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItc3RhdHVzIHNmLXRvb2xiYXItc3RhdHVzLWdyZWVuXCI+IjsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDUwCiAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNTAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNhY2hlSGl0c0NvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA1MCksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgeWllbGQgIjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgICAgIDxiPkNhY2hlIG1pc3NlczwvYj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItc3RhdHVzICI7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSA1NAogICAgICAgICAgICAgICAgICAgIHlpZWxkICgoKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCA1NCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY2FjaGVNaXNzZXNDb3VudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNTQpID4gMCkpID8gKCJzZi10b29sYmFyLXN0YXR1cy15ZWxsb3ciKSA6ICgiIikpOwogICAgICAgICAgICAgICAgICAgIHlpZWxkICJcIj4iOwogICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDU0LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjYWNoZU1pc3Nlc0NvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA1NCksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgeWllbGQgIjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgICAgIDxiPkNhY2hlIHB1dHM8L2I+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXN0YXR1cyAiOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgNTgKICAgICAgICAgICAgICAgICAgICB5aWVsZCAoKChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNTgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNhY2hlUHV0c0NvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA1OCkgPiAwKSkgPyAoInNmLXRvb2xiYXItc3RhdHVzLXllbGxvdyIpIDogKCIiKSk7CiAgICAgICAgICAgICAgICAgICAgeWllbGQgIlwiPiI7CiAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNTgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNhY2hlUHV0c0NvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA1OCksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgeWllbGQgIjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDYxCiAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlXCI+CiAgICAgICAgICAgICAgICAgICAgPGI+U2Vjb25kIExldmVsIENhY2hlPC9iPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1zdGF0dXNcIj5kaXNhYmxlZDwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gbGluZSA2NgogICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgIjsKICAgICAgICAgICAgICAgIHJldHVybjsgeWllbGQgJyc7CiAgICAgICAgICAgIH0pKCkpKSA/ICcnIDogbmV3IE1hcmt1cCgkdG1wLCAkdGhpcy0+ZW52LT5nZXRDaGFyc2V0KCkpOwogICAgICAgICAgICAvLyBsaW5lIDY3CiAgICAgICAgICAgIHlpZWxkICIKICAgICAgICAiOwogICAgICAgICAgICAvLyBsaW5lIDY4CiAgICAgICAgICAgIHlpZWxkIFR3aWdcRXh0ZW5zaW9uXENvcmVFeHRlbnNpb246OmluY2x1ZGUoJHRoaXMtPmVudiwgJGNvbnRleHQsICJAV2ViUHJvZmlsZXIvUHJvZmlsZXIvdG9vbGJhcl9pdGVtLmh0bWwudHdpZyIsIFsibGluayIgPT4gKGlzc2V0KCRjb250ZXh0WyJwcm9maWxlcl91cmwiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicHJvZmlsZXJfdXJsIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInByb2ZpbGVyX3VybCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInByb2ZpbGVyX3VybCIgZG9lcyBub3QgZXhpc3QuJywgNjgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInN0YXR1cyIgPT4gKChhcnJheV9rZXlfZXhpc3RzKCJzdGF0dXMiLCAkY29udGV4dCkpID8gKFR3aWdcRXh0ZW5zaW9uXENvcmVFeHRlbnNpb246OmRlZmF1bHQoKGlzc2V0KCRjb250ZXh0WyJzdGF0dXMiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygic3RhdHVzIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInN0YXR1cyJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInN0YXR1cyIgZG9lcyBub3QgZXhpc3QuJywgNjgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgIiIpKSA6ICgiIikpXSk7CiAgICAgICAgICAgIHlpZWxkICIKCiAgICAiOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAkX19pbnRlcm5hbF82ZjQ3YmJlOTk4M2FmODFmMWU3NDUwZTlhM2UzNzY4Zi0+bGVhdmUoJF9faW50ZXJuYWxfNmY0N2JiZTk5ODNhZjgxZjFlNzQ1MGU5YTNlMzc2OGZfcHJvZik7CgogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyLT5sZWF2ZSgkX19pbnRlcm5hbF81YTI3YThiYTIxY2E3OWI2MTkzMjM3NmIyZmE5MjJkMl9wcm9mKTsKCiAgICAgICAgcmV0dXJuOyB5aWVsZCAnJzsKICAgIH0KCiAgICAvLyBsaW5lIDczCiAgICBwdWJsaWMgZnVuY3Rpb24gYmxvY2tfbWVudSgkY29udGV4dCwgYXJyYXkgJGJsb2NrcyA9IFtdKQogICAgewogICAgICAgICRtYWNyb3MgPSAkdGhpcy0+bWFjcm9zOwogICAgICAgICRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJ1bmRsZVxcV2ViUHJvZmlsZXJCdW5kbGVcXFR3aWdcXFdlYlByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDItPmVudGVyKCRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJibG9jayIsICJtZW51IikpOwoKICAgICAgICAkX19pbnRlcm5hbF82ZjQ3YmJlOTk4M2FmODFmMWU3NDUwZTlhM2UzNzY4ZiA9ICR0aGlzLT5leHRlbnNpb25zWyJTeW1mb255XFxCcmlkZ2VcXFR3aWdcXEV4dGVuc2lvblxcUHJvZmlsZXJFeHRlbnNpb24iXTsKICAgICAgICAkX19pbnRlcm5hbF82ZjQ3YmJlOTk4M2FmODFmMWU3NDUwZTlhM2UzNzY4Zi0+ZW50ZXIoJF9faW50ZXJuYWxfNmY0N2JiZTk5ODNhZjgxZjFlNzQ1MGU5YTNlMzc2OGZfcHJvZiA9IG5ldyBcVHdpZ1xQcm9maWxlclxQcm9maWxlKCR0aGlzLT5nZXRUZW1wbGF0ZU5hbWUoKSwgImJsb2NrIiwgIm1lbnUiKSk7CgogICAgICAgIC8vIGxpbmUgNzQKICAgICAgICB5aWVsZCAiICAgIDxzcGFuIGNsYXNzPVwibGFiZWwgIjsKICAgICAgICB5aWVsZCAoKChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNzQsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImludmFsaWRFbnRpdHlDb3VudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNzQpID4gMCkpID8gKCJsYWJlbC1zdGF0dXMtZXJyb3IiKSA6ICgiIikpOwogICAgICAgIHlpZWxkICIgIjsKICAgICAgICB5aWVsZCAoKChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNzQsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInF1ZXJ5Y291bnQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDc0KSA9PSAwKSkgPyAoImRpc2FibGVkIikgOiAoIiIpKTsKICAgICAgICB5aWVsZCAiXCI+CiAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uXCI+IjsKICAgICAgICAvLyBsaW5lIDc1CiAgICAgICAgeWllbGQgVHdpZ1xFeHRlbnNpb25cQ29yZUV4dGVuc2lvbjo6aW5jbHVkZSgkdGhpcy0+ZW52LCAkY29udGV4dCwgKCgiQERvY3RyaW5lL0NvbGxlY3Rvci8iIC4gKCgoKGlzc2V0KCRjb250ZXh0WyJwcm9maWxlcl9tYXJrdXBfdmVyc2lvbiJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJwcm9maWxlcl9tYXJrdXBfdmVyc2lvbiIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJwcm9maWxlcl9tYXJrdXBfdmVyc2lvbiJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInByb2ZpbGVyX21hcmt1cF92ZXJzaW9uIiBkb2VzIG5vdCBleGlzdC4nLCA3NSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpIDwgMykpID8gKCJpY29uIikgOiAoImRhdGFiYXNlIikpKSAuICIuc3ZnIikpOwogICAgICAgIHlpZWxkICI8L3NwYW4+CiAgICAgICAgPHN0cm9uZz5Eb2N0cmluZTwvc3Ryb25nPgogICAgICAgICI7CiAgICAgICAgLy8gbGluZSA3NwogICAgICAgIGlmIChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNzcsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImludmFsaWRFbnRpdHlDb3VudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNzcpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgNzgKICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY291bnRcIj4KICAgICAgICAgICAgICAgIDxzcGFuPiI7CiAgICAgICAgICAgIC8vIGxpbmUgNzkKICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgNzksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImludmFsaWRFbnRpdHlDb3VudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNzkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICB5aWVsZCAiPC9zcGFuPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSA4MgogICAgICAgIHlpZWxkICIgICAgPC9zcGFuPgoiOwogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmLT5sZWF2ZSgkX19pbnRlcm5hbF82ZjQ3YmJlOTk4M2FmODFmMWU3NDUwZTlhM2UzNzY4Zl9wcm9mKTsKCiAgICAgICAgCiAgICAgICAgJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDItPmxlYXZlKCRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyX3Byb2YpOwoKICAgICAgICByZXR1cm47IHlpZWxkICcnOwogICAgfQoKICAgIC8vIGxpbmUgODUKICAgIHB1YmxpYyBmdW5jdGlvbiBibG9ja19wYW5lbCgkY29udGV4dCwgYXJyYXkgJGJsb2NrcyA9IFtdKQogICAgewogICAgICAgICRtYWNyb3MgPSAkdGhpcy0+bWFjcm9zOwogICAgICAgICRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJ1bmRsZVxcV2ViUHJvZmlsZXJCdW5kbGVcXFR3aWdcXFdlYlByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDItPmVudGVyKCRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJibG9jayIsICJwYW5lbCIpKTsKCiAgICAgICAgJF9faW50ZXJuYWxfNmY0N2JiZTk5ODNhZjgxZjFlNzQ1MGU5YTNlMzc2OGYgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnJpZGdlXFxUd2lnXFxFeHRlbnNpb25cXFByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgJF9faW50ZXJuYWxfNmY0N2JiZTk5ODNhZjgxZjFlNzQ1MGU5YTNlMzc2OGYtPmVudGVyKCRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJibG9jayIsICJwYW5lbCIpKTsKCiAgICAgICAgLy8gbGluZSA4NgogICAgICAgIHlpZWxkICIgICAgIjsKICAgICAgICBpZiAoKCJleHBsYWluIiA9PSAoaXNzZXQoJGNvbnRleHRbInBhZ2UiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicGFnZSIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJwYWdlIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAicGFnZSIgZG9lcyBub3QgZXhpc3QuJywgODYsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkpIHsKICAgICAgICAgICAgLy8gbGluZSA4NwogICAgICAgICAgICB5aWVsZCAiICAgICAgICAiOwogICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdTeW1mb255XEJyaWRnZVxUd2lnXEV4dGVuc2lvblxIdHRwS2VybmVsUnVudGltZScpLT5yZW5kZXJGcmFnbWVudChTeW1mb255XEJyaWRnZVxUd2lnXEV4dGVuc2lvblxIdHRwS2VybmVsRXh0ZW5zaW9uOjpjb250cm9sbGVyKCJEb2N0cmluZVxcQnVuZGxlXFxEb2N0cmluZUJ1bmRsZVxcQ29udHJvbGxlclxcUHJvZmlsZXJDb250cm9sbGVyOjpleHBsYWluQWN0aW9uIiwgWyJ0b2tlbiIgPT4gICAgICAgICAgICAgLy8gbGluZSA4OAooaXNzZXQoJGNvbnRleHRbInRva2VuIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInRva2VuIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInRva2VuIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAidG9rZW4iIGRvZXMgbm90IGV4aXN0LicsIDg4LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJwYW5lbCIgPT4gImRiIiwgImNvbm5lY3Rpb25OYW1lIiA9PiBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICAgICAgICAgICAgIC8vIGxpbmUgOTAKKGlzc2V0KCRjb250ZXh0WyJyZXF1ZXN0Il0pIHx8IGFycmF5X2tleV9leGlzdHMoInJlcXVlc3QiLCAkY29udGV4dCkgPyAkY29udGV4dFsicmVxdWVzdCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInJlcXVlc3QiIGRvZXMgbm90IGV4aXN0LicsIDkwLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJxdWVyeSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgOTApLCAiZ2V0IiwgWyJjb25uZWN0aW9uIl0sICJtZXRob2QiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA5MCksICJxdWVyeSIgPT4gQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAgICAgICAgICAgICAvLyBsaW5lIDkxCihpc3NldCgkY29udGV4dFsicmVxdWVzdCJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJyZXF1ZXN0IiwgJGNvbnRleHQpID8gJGNvbnRleHRbInJlcXVlc3QiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJyZXF1ZXN0IiBkb2VzIG5vdCBleGlzdC4nLCA5MSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicXVlcnkiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDkxKSwgImdldCIsIFsicXVlcnkiXSwgIm1ldGhvZCIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDkxKV0pKTsKICAgICAgICAgICAgLy8gbGluZSA5MgogICAgICAgICAgICB5aWVsZCAiCiAgICAiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGxpbmUgOTQKICAgICAgICAgICAgeWllbGQgIiAgICAgICAgIjsKICAgICAgICAgICAgeWllbGQgZnJvbSAgICAgICAgICAgICAkdGhpcy0+dW53cmFwKCktPnlpZWxkQmxvY2soInF1ZXJpZXMiLCAkY29udGV4dCwgJGJsb2Nrcyk7CiAgICAgICAgICAgIHlpZWxkICIKICAgICI7CiAgICAgICAgfQogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmLT5sZWF2ZSgkX19pbnRlcm5hbF82ZjQ3YmJlOTk4M2FmODFmMWU3NDUwZTlhM2UzNzY4Zl9wcm9mKTsKCiAgICAgICAgCiAgICAgICAgJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDItPmxlYXZlKCRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyX3Byb2YpOwoKICAgICAgICByZXR1cm47IHlpZWxkICcnOwogICAgfQoKICAgIC8vIGxpbmUgOTgKICAgIHB1YmxpYyBmdW5jdGlvbiBibG9ja19xdWVyaWVzKCRjb250ZXh0LCBhcnJheSAkYmxvY2tzID0gW10pCiAgICB7CiAgICAgICAgJG1hY3JvcyA9ICR0aGlzLT5tYWNyb3M7CiAgICAgICAgJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDIgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnVuZGxlXFxXZWJQcm9maWxlckJ1bmRsZVxcVHdpZ1xcV2ViUHJvZmlsZXJFeHRlbnNpb24iXTsKICAgICAgICAkX19pbnRlcm5hbF81YTI3YThiYTIxY2E3OWI2MTkzMjM3NmIyZmE5MjJkMi0+ZW50ZXIoJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDJfcHJvZiA9IG5ldyBcVHdpZ1xQcm9maWxlclxQcm9maWxlKCR0aGlzLT5nZXRUZW1wbGF0ZU5hbWUoKSwgImJsb2NrIiwgInF1ZXJpZXMiKSk7CgogICAgICAgICRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmID0gJHRoaXMtPmV4dGVuc2lvbnNbIlN5bWZvbnlcXEJyaWRnZVxcVHdpZ1xcRXh0ZW5zaW9uXFxQcm9maWxlckV4dGVuc2lvbiJdOwogICAgICAgICRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmLT5lbnRlcigkX19pbnRlcm5hbF82ZjQ3YmJlOTk4M2FmODFmMWU3NDUwZTlhM2UzNzY4Zl9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAiYmxvY2siLCAicXVlcmllcyIpKTsKCiAgICAgICAgLy8gbGluZSA5OQogICAgICAgIHlpZWxkICIgICAgPHN0eWxlPgogICAgICAgIC50aW1lLWNvbnRhaW5lciB7IHBvc2l0aW9uOiByZWxhdGl2ZTsgfQogICAgICAgIC50aW1lLWNvbnRhaW5lciAubm93cmFwIHsgcG9zaXRpb246IHJlbGF0aXZlOyB6LWluZGV4OiAxOyB0ZXh0LXNoYWRvdzogMCAwIDJweCAjZmZmOyB9CiAgICAgICAgLnRpbWUtYmFyIHsgZGlzcGxheTogYmxvY2s7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyBib3R0b206IDA7IGJhY2tncm91bmQ6ICNlMGUwZTA7IH0KICAgICAgICAuc3FsLXJ1bm5hYmxlLnNmLXRvZ2dsZS1jb250ZW50LnNmLXRvZ2dsZS12aXNpYmxlIHsgZGlzcGxheTogZmxleDsgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsgfQogICAgICAgIC5zcWwtcnVubmFibGUgYnV0dG9uIHsgYWxpZ24tc2VsZjogZW5kOyB9CiAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDEwNQogICAgICAgIGlmICgoKGlzc2V0KCRjb250ZXh0WyJwcm9maWxlcl9tYXJrdXBfdmVyc2lvbiJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJwcm9maWxlcl9tYXJrdXBfdmVyc2lvbiIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJwcm9maWxlcl9tYXJrdXBfdmVyc2lvbiJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInByb2ZpbGVyX21hcmt1cF92ZXJzaW9uIiBkb2VzIG5vdCBleGlzdC4nLCAxMDUsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSA+PSAzKSkgewogICAgICAgICAgICAvLyBsaW5lIDEwNgogICAgICAgICAgICB5aWVsZCAiICAgICAgICAuaGlnaGxpZ2h0IC5rZXl3b3JkICAgeyBjb2xvcjogdmFyKC0taGlnaGxpZ2h0LWtleXdvcmQpOyBmb250LXdlaWdodDogYm9sZDsgfQogICAgICAgIC5oaWdobGlnaHQgLndvcmQgICAgICB7IGNvbG9yOiB2YXIoLS1jb2xvci10ZXh0KTsgfQogICAgICAgIC5oaWdobGlnaHQgLnZhcmlhYmxlICB7IGNvbG9yOiB2YXIoLS1oaWdobGlnaHQtdmFyaWFibGUpOyB9CiAgICAgICAgLmhpZ2hsaWdodCAuc3ltYm9sICAgIHsgY29sb3I6IHZhcigtLWNvbG9yLXRleHQpOyB9CiAgICAgICAgLmhpZ2hsaWdodCAuY29tbWVudCAgIHsgY29sb3I6IHZhcigtLWhpZ2hsaWdodC1jb21tZW50KTsgfQogICAgICAgIC5oaWdobGlnaHQgLnN0cmluZyAgICB7IGNvbG9yOiB2YXIoLS1oaWdobGlnaHQtc3RyaW5nKTsgfQogICAgICAgIC5oaWdobGlnaHQgLm51bWJlciAgICB7IGNvbG9yOiB2YXIoLS1oaWdobGlnaHQtY29uc3RhbnQpOyBmb250LXdlaWdodDogYm9sZDsgfQogICAgICAgIC5oaWdobGlnaHQgLmVycm9yICAgICB7IGNvbG9yOiB2YXIoLS1oaWdobGlnaHQtZXJyb3IpOyB9CiAgICAgICAgIjsKICAgICAgICB9CiAgICAgICAgLy8gbGluZSAxMTUKICAgICAgICB5aWVsZCAiICAgIDwvc3R5bGU+CgogICAgPGgyPlF1ZXJ5IE1ldHJpY3M8L2gyPgoKICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNzXCI+CiAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpYy1ncm91cFwiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljXCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCI+IjsKICAgICAgICAvLyBsaW5lIDEyMgogICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDEyMiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAicXVlcnljb3VudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTIyKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICB5aWVsZCAiPC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPkRhdGFiYXNlIFF1ZXJpZXM8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPiI7CiAgICAgICAgLy8gbGluZSAxMjcKICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxMjcsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImdyb3VwZWRRdWVyeUNvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxMjcpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgIHlpZWxkICI8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+RGlmZmVyZW50IHN0YXRlbWVudHM8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPiI7CiAgICAgICAgLy8gbGluZSAxMzIKICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKFR3aWdcRXh0ZW5zaW9uXENvcmVFeHRlbnNpb246OnNwcmludGYoIiUwLjJmIiwgKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxMzIsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgInRpbWUiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDEzMikgKiAxMDAwKSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgeWllbGQgIiBtczwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGFiZWxcIj5RdWVyeSB0aW1lPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNcIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj4iOwogICAgICAgIC8vIGxpbmUgMTM3CiAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTM3LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJpbnZhbGlkRW50aXR5Q291bnQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDEzNyksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgeWllbGQgIjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGFiZWxcIj5JbnZhbGlkIGVudGl0aWVzPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDE0MgogICAgICAgIGlmIChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTQyLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjYWNoZUVuYWJsZWQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE0MikpIHsKICAgICAgICAgICAgLy8gbGluZSAxNDMKICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWMtZ3JvdXBcIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNcIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCI+IjsKICAgICAgICAgICAgLy8gbGluZSAxNDUKICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTQ1LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjYWNoZUhpdHNDb3VudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTQ1KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgeWllbGQgIjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+Q2FjaGUgaGl0czwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj4iOwogICAgICAgICAgICAvLyBsaW5lIDE0OQogICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxNDksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNhY2hlTWlzc2VzQ291bnQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE0OSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgIHlpZWxkICI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPkNhY2hlIG1pc3Nlczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj4iOwogICAgICAgICAgICAvLyBsaW5lIDE1MwogICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxNTMsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNhY2hlUHV0c0NvdW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNTMpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICB5aWVsZCAiPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGFiZWxcIj5DYWNoZSBwdXRzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICI7CiAgICAgICAgfQogICAgICAgIC8vIGxpbmUgMTU4CiAgICAgICAgeWllbGQgIiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPVwic2YtdGFic1wiIHN0eWxlPVwibWFyZ2luLXRvcDogMjBweDtcIj4KICAgICAgICA8ZGl2IGNsYXNzPVwidGFiICI7CiAgICAgICAgLy8gbGluZSAxNjEKICAgICAgICB5aWVsZCAoKFR3aWdcRXh0ZW5zaW9uXENvcmVFeHRlbnNpb246OnRlc3RFbXB0eShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTYxLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJxdWVyaWVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNjEpKSkgPyAoImRpc2FibGVkIikgOiAoIiIpKTsKICAgICAgICB5aWVsZCAiXCI+CiAgICAgICAgICAgICI7CiAgICAgICAgLy8gbGluZSAxNjIKICAgICAgICAkY29udGV4dFsiZ3JvdXBfcXVlcmllcyJdID0gQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbInJlcXVlc3QiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicmVxdWVzdCIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJyZXF1ZXN0Il0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAicmVxdWVzdCIgZG9lcyBub3QgZXhpc3QuJywgMTYyLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJxdWVyeSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTYyKSwgImdldEJvb2xlYW4iLCBbImdyb3VwIl0sICJtZXRob2QiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNjIpOwogICAgICAgIC8vIGxpbmUgMTYzCiAgICAgICAgeWllbGQgIiAgICAgICAgICAgIDxoMyBjbGFzcz1cInRhYi10aXRsZVwiPgogICAgICAgICAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDE2NAogICAgICAgIGlmICgoaXNzZXQoJGNvbnRleHRbImdyb3VwX3F1ZXJpZXMiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiZ3JvdXBfcXVlcmllcyIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJncm91cF9xdWVyaWVzIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiZ3JvdXBfcXVlcmllcyIgZG9lcyBub3QgZXhpc3QuJywgMTY0LCAkdGhpcy0+c291cmNlKTsgfSkoKSkpIHsKICAgICAgICAgICAgLy8gbGluZSAxNjUKICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgR3JvdXBlZCBTdGF0ZW1lbnRzCiAgICAgICAgICAgICAgICAiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGxpbmUgMTY3CiAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgIFF1ZXJpZXMKICAgICAgICAgICAgICAgICI7CiAgICAgICAgfQogICAgICAgIC8vIGxpbmUgMTY5CiAgICAgICAgeWllbGQgIiAgICAgICAgICAgIDwvaDM+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIj4KICAgICAgICAgICAgICAgICI7CiAgICAgICAgLy8gbGluZSAxNzIKICAgICAgICBpZiAoICFDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTcyLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJxdWVyaWVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxNzIpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgMTczCiAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5ObyBleGVjdXRlZCBxdWVyaWVzLjwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gbGluZSAxNzcKICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgaWYgKChpc3NldCgkY29udGV4dFsiZ3JvdXBfcXVlcmllcyJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJncm91cF9xdWVyaWVzIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImdyb3VwX3F1ZXJpZXMiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJncm91cF9xdWVyaWVzIiBkb2VzIG5vdCBleGlzdC4nLCAxNzcsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkgewogICAgICAgICAgICAgICAgLy8gbGluZSAxNzgKICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICA8cD48YSBocmVmPVwiIjsKICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoJHRoaXMtPmV4dGVuc2lvbnNbJ1N5bWZvbnlcQnJpZGdlXFR3aWdcRXh0ZW5zaW9uXFJvdXRpbmdFeHRlbnNpb24nXS0+Z2V0UGF0aCgiX3Byb2ZpbGVyIiwgWyJwYW5lbCIgPT4gImRiIiwgInRva2VuIiA9PiAoaXNzZXQoJGNvbnRleHRbInRva2VuIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInRva2VuIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInRva2VuIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAidG9rZW4iIGRvZXMgbm90IGV4aXN0LicsIDE3OCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpXSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB5aWVsZCAiXCI+U2hvdyBhbGwgcXVlcmllczwvYT48L3A+CiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMTgwCiAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGEgaHJlZj1cIiI7CiAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKCR0aGlzLT5leHRlbnNpb25zWydTeW1mb255XEJyaWRnZVxUd2lnXEV4dGVuc2lvblxSb3V0aW5nRXh0ZW5zaW9uJ10tPmdldFBhdGgoIl9wcm9maWxlciIsIFsicGFuZWwiID0+ICJkYiIsICJ0b2tlbiIgPT4gKGlzc2V0KCRjb250ZXh0WyJ0b2tlbiJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJ0b2tlbiIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJ0b2tlbiJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInRva2VuIiBkb2VzIG5vdCBleGlzdC4nLCAxODAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImdyb3VwIiA9PiB0cnVlXSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB5aWVsZCAiXCI+R3JvdXAgc2ltaWxhciBzdGF0ZW1lbnRzPC9hPjwvcD4KICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIC8vIGxpbmUgMTgyCiAgICAgICAgICAgIHlpZWxkICIKICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAvLyBsaW5lIDE4MwogICAgICAgICAgICAkY29udGV4dFsnX3BhcmVudCddID0gJGNvbnRleHQ7CiAgICAgICAgICAgICRjb250ZXh0Wydfc2VxJ10gPSBDb3JlRXh0ZW5zaW9uOjplbnN1cmVUcmF2ZXJzYWJsZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMTgzLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJxdWVyaWVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxODMpKTsKICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXSA9IFsKICAgICAgICAgICAgICAncGFyZW50JyA9PiAkY29udGV4dFsnX3BhcmVudCddLAogICAgICAgICAgICAgICdpbmRleDAnID0+IDAsCiAgICAgICAgICAgICAgJ2luZGV4JyAgPT4gMSwKICAgICAgICAgICAgICAnZmlyc3QnICA9PiB0cnVlLAogICAgICAgICAgICBdOwogICAgICAgICAgICBpZiAoaXNfYXJyYXkoJGNvbnRleHRbJ19zZXEnXSkgfHwgKGlzX29iamVjdCgkY29udGV4dFsnX3NlcSddKSAmJiAkY29udGV4dFsnX3NlcSddIGluc3RhbmNlb2YgXENvdW50YWJsZSkpIHsKICAgICAgICAgICAgICAgICRsZW5ndGggPSBjb3VudCgkY29udGV4dFsnX3NlcSddKTsKICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ3JldmluZGV4MCddID0gJGxlbmd0aCAtIDE7CiAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydyZXZpbmRleCddID0gJGxlbmd0aDsKICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ2xlbmd0aCddID0gJGxlbmd0aDsKICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ2xhc3QnXSA9IDEgPT09ICRsZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yZWFjaCAoJGNvbnRleHRbJ19zZXEnXSBhcyAkY29udGV4dFsiY29ubmVjdGlvbiJdID0+ICRjb250ZXh0WyJxdWVyaWVzIl0pIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMTg0CiAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIGlmICgoVHdpZ1xFeHRlbnNpb25cQ29yZUV4dGVuc2lvbjo6bGVuZ3RoKCR0aGlzLT5lbnYtPmdldENoYXJzZXQoKSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDE4NCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY29ubmVjdGlvbnMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDE4NCkpID4gMSkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDE4NQogICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPiI7CiAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZSgkY29udGV4dFsiY29ubmVjdGlvbiJdLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIHlpZWxkICIgPHNtYWxsPmNvbm5lY3Rpb248L3NtYWxsPjwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBsaW5lIDE4NwogICAgICAgICAgICAgICAgeWllbGQgIgogICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgLy8gbGluZSAxODgKICAgICAgICAgICAgICAgIGlmIChUd2lnXEV4dGVuc2lvblxDb3JlRXh0ZW5zaW9uOjp0ZXN0RW1wdHkoJGNvbnRleHRbInF1ZXJpZXMiXSkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDE4OQogICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+Tm8gZGF0YWJhc2UgcXVlcmllcyB3ZXJlIHBlcmZvcm1lZC48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAxOTMKICAgICAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgaWYgKChpc3NldCgkY29udGV4dFsiZ3JvdXBfcXVlcmllcyJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJncm91cF9xdWVyaWVzIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImdyb3VwX3F1ZXJpZXMiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJncm91cF9xdWVyaWVzIiBkb2VzIG5vdCBleGlzdC4nLCAxOTMsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDE5NAogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsicXVlcmllcyJdID0gQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAxOTQsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImdyb3VwZWRRdWVyaWVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAxOTQpLCAkY29udGV4dFsiY29ubmVjdGlvbiJdLCBbXSwgImFycmF5IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMTk0KTsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAxOTUKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDE5NgogICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPVwiYWx0IHF1ZXJpZXMtdGFibGVcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMTk5CiAgICAgICAgICAgICAgICAgICAgaWYgKChpc3NldCgkY29udGV4dFsiZ3JvdXBfcXVlcmllcyJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJncm91cF9xdWVyaWVzIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImdyb3VwX3F1ZXJpZXMiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJncm91cF9xdWVyaWVzIiBkb2VzIG5vdCBleGlzdC4nLCAxOTksICR0aGlzLT5zb3VyY2UpOyB9KSgpKSkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIwMAogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cIm5vd3JhcFwiIG9uY2xpY2s9XCJqYXZhc2NyaXB0OnNvcnRUYWJsZSh0aGlzLCAwLCAncXVlcmllcy0iOwogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9vcCJdLCAiaW5kZXgiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIwMCksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICInKVwiIGRhdGEtc29ydC1kaXJlY3Rpb249XCIxXCIgc3R5bGU9XCJjdXJzb3I6IHBvaW50ZXI7XCI+VGltZTxzcGFuIGNsYXNzPVwidGV4dC1tdXRlZFwiPiYjOTY2MDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cIm5vd3JhcFwiIG9uY2xpY2s9XCJqYXZhc2NyaXB0OnNvcnRUYWJsZSh0aGlzLCAxLCAncXVlcmllcy0iOwogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIwMQogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9vcCJdLCAiaW5kZXgiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIwMSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICInKVwiIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiPkNvdW50PHNwYW4+PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyMDMKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9XCJub3dyYXBcIiBvbmNsaWNrPVwiamF2YXNjcmlwdDpzb3J0VGFibGUodGhpcywgMCwgJ3F1ZXJpZXMtIjsKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvb3AiXSwgImluZGV4IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMDMpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiJylcIiBkYXRhLXNvcnQtZGlyZWN0aW9uPVwiLTFcIiBzdHlsZT1cImN1cnNvcjogcG9pbnRlcjtcIj4jPHNwYW4gY2xhc3M9XCJ0ZXh0LW11dGVkXCI+JiM5NjUwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPVwibm93cmFwXCIgb25jbGljaz1cImphdmFzY3JpcHQ6c29ydFRhYmxlKHRoaXMsIDEsICdxdWVyaWVzLSI7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjA0CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJsb29wIl0sICJpbmRleCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjA0KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIicpXCIgc3R5bGU9XCJjdXJzb3I6IHBvaW50ZXI7XCI+VGltZTxzcGFuPjwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIwNgogICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggc3R5bGU9XCJ3aWR0aDogMTAwJTtcIj5JbmZvPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5IGlkPVwicXVlcmllcy0iOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjA5CiAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvb3AiXSwgImluZGV4IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMDkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgIHlpZWxkICJcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjEwCiAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbJ19wYXJlbnQnXSA9ICRjb250ZXh0OwogICAgICAgICAgICAgICAgICAgICRjb250ZXh0Wydfc2VxJ10gPSBDb3JlRXh0ZW5zaW9uOjplbnN1cmVUcmF2ZXJzYWJsZSgkY29udGV4dFsicXVlcmllcyJdKTsKICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddID0gWwogICAgICAgICAgICAgICAgICAgICAgJ3BhcmVudCcgPT4gJGNvbnRleHRbJ19wYXJlbnQnXSwKICAgICAgICAgICAgICAgICAgICAgICdpbmRleDAnID0+IDAsCiAgICAgICAgICAgICAgICAgICAgICAnaW5kZXgnICA9PiAxLAogICAgICAgICAgICAgICAgICAgICAgJ2ZpcnN0JyAgPT4gdHJ1ZSwKICAgICAgICAgICAgICAgICAgICBdOwogICAgICAgICAgICAgICAgICAgIGlmIChpc19hcnJheSgkY29udGV4dFsnX3NlcSddKSB8fCAoaXNfb2JqZWN0KCRjb250ZXh0Wydfc2VxJ10pICYmICRjb250ZXh0Wydfc2VxJ10gaW5zdGFuY2VvZiBcQ291bnRhYmxlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAkbGVuZ3RoID0gY291bnQoJGNvbnRleHRbJ19zZXEnXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ3JldmluZGV4MCddID0gJGxlbmd0aCAtIDE7CiAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ3JldmluZGV4J10gPSAkbGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydsZW5ndGgnXSA9ICRsZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ2xhc3QnXSA9IDEgPT09ICRsZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRjb250ZXh0Wydfc2VxJ10gYXMgJGNvbnRleHRbImkiXSA9PiAkY29udGV4dFsicXVlcnkiXSkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIxMQogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbImkiXSA9ICgoKGlzc2V0KCRjb250ZXh0WyJncm91cF9xdWVyaWVzIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImdyb3VwX3F1ZXJpZXMiLCAkY29udGV4dCkgPyAkY29udGV4dFsiZ3JvdXBfcXVlcmllcyJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImdyb3VwX3F1ZXJpZXMiIGRvZXMgbm90IGV4aXN0LicsIDIxMSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKSA/IChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbInF1ZXJ5Il0sICJpbmRleCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjExKSkgOiAoJGNvbnRleHRbImkiXSkpOwogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIxMgogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGlkPVwicXVlcnlOby0iOwogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKCRjb250ZXh0WyJpIl0sICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICItIjsKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9vcCJdLCAicGFyZW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMTIpLCAibG9vcCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjEyKSwgImluZGV4IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMTIpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIxMwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGlzc2V0KCRjb250ZXh0WyJncm91cF9xdWVyaWVzIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImdyb3VwX3F1ZXJpZXMiLCAkY29udGV4dCkgPyAkY29udGV4dFsiZ3JvdXBfcXVlcmllcyJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImdyb3VwX3F1ZXJpZXMiIGRvZXMgbm90IGV4aXN0LicsIDIxMywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIxNAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGltZS1jb250YWluZXJcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0aW1lLWJhclwiIHN0eWxlPVwid2lkdGg6IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjE1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKFR3aWdcRXh0ZW5zaW9uXENvcmVFeHRlbnNpb246OnNwcmludGYoIiUwLjJmIiwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJxdWVyeSJdLCAiZXhlY3V0aW9uUGVyY2VudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjE1KSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiJVwiPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJub3dyYXBcIj4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyMTYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoVHdpZ1xFeHRlbnNpb25cQ29yZUV4dGVuc2lvbjo6c3ByaW50ZigiJTAuMmYiLCAoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJxdWVyeSJdLCAiZXhlY3V0aW9uTVMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIxNikgKiAxMDAwKSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiJm5ic3A7bXM8YnIgLz4oIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoVHdpZ1xFeHRlbnNpb25cQ29yZUV4dGVuc2lvbjo6c3ByaW50ZigiJTAuMmYiLCBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbInF1ZXJ5Il0sICJleGVjdXRpb25QZXJjZW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMTYpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICIlKTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cIm5vd3JhcFwiPiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIxOAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbInF1ZXJ5Il0sICJjb3VudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjE4KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICI8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjIwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJub3dyYXBcIj4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvb3AiXSwgImluZGV4IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMjApLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwibm93cmFwXCI+IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjIxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKFR3aWdcRXh0ZW5zaW9uXENvcmVFeHRlbnNpb246OnNwcmludGYoIiUwLjJmIiwgKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsicXVlcnkiXSwgImV4ZWN1dGlvbk1TIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMjEpICogMTAwMCkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIiZuYnNwO21zPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyMjMKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyMjQKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmV4dGVuc2lvbnNbJ0RvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxUd2lnXERvY3RyaW5lRXh0ZW5zaW9uJ10tPnByZXR0aWZ5U3FsKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsicXVlcnkiXSwgInNxbCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjI0KSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICIKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBjbGFzcz1cImZvbnQtbm9ybWFsIHRleHQtc21hbGxcIj5QYXJhbWV0ZXJzPC9zdHJvbmc+OiAiOwogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIyNwogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZXh0ZW5zaW9uc1snU3ltZm9ueVxCdW5kbGVcV2ViUHJvZmlsZXJCdW5kbGVcVHdpZ1xXZWJQcm9maWxlckV4dGVuc2lvbiddLT5kdW1wRGF0YSgkdGhpcy0+ZW52LCBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbInF1ZXJ5Il0sICJwYXJhbXMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIyNyksIDIpOwogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LXNtYWxsIGZvbnQtbm9ybWFsXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJzZi10b2dnbGUgbGluay1pbnZlcnNlXCIgZGF0YS10b2dnbGUtc2VsZWN0b3I9XCIjZm9ybWF0dGVkLXF1ZXJ5LSI7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjMxCiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoJGNvbnRleHRbImkiXSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIi0iOwogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJsb29wIl0sICJwYXJlbnQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIzMSksICJsb29wIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMzEpLCAiaW5kZXgiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIzMSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICJcIiBkYXRhLXRvZ2dsZS1hbHQtY29udGVudD1cIkhpZGUgZm9ybWF0dGVkIHF1ZXJ5XCI+VmlldyBmb3JtYXR0ZWQgcXVlcnk8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIzMwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJxdWVyeSJdLCAicnVubmFibGUiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIzMykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjM0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZuYnNwOyZuYnNwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBjbGFzcz1cInNmLXRvZ2dsZSBsaW5rLWludmVyc2VcIiBkYXRhLXRvZ2dsZS1zZWxlY3Rvcj1cIiNvcmlnaW5hbC1xdWVyeS0iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyMzUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoJGNvbnRleHRbImkiXSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICItIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvb3AiXSwgInBhcmVudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjM1KSwgImxvb3AiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDIzNSksICJpbmRleCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjM1KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICJcIiBkYXRhLXRvZ2dsZS1hbHQtY29udGVudD1cIkhpZGUgcnVubmFibGUgcXVlcnlcIj5WaWV3IHJ1bm5hYmxlIHF1ZXJ5PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjM3CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyMzgKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsicXVlcnkiXSwgImV4cGxhaW5hYmxlIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyMzgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDIzOQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwibGluay1pbnZlcnNlXCIgaHJlZj1cIiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI0MAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZSgkdGhpcy0+ZXh0ZW5zaW9uc1snU3ltZm9ueVxCcmlkZ2VcVHdpZ1xFeHRlbnNpb25cUm91dGluZ0V4dGVuc2lvbiddLT5nZXRQYXRoKCJfcHJvZmlsZXIiLCBbInBhbmVsIiA9PiAiZGIiLCAidG9rZW4iID0+IChpc3NldCgkY29udGV4dFsidG9rZW4iXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygidG9rZW4iLCAkY29udGV4dCkgPyAkY29udGV4dFsidG9rZW4iXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJ0b2tlbiIgZG9lcyBub3QgZXhpc3QuJywgMjQwLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJwYWdlIiA9PiAiZXhwbGFpbiIsICJjb25uZWN0aW9uIiA9PiAkY29udGV4dFsiY29ubmVjdGlvbiJdLCAicXVlcnkiID0+ICRjb250ZXh0WyJpIl1dKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICJcIiBvbmNsaWNrPVwicmV0dXJuIGV4cGxhaW4odGhpcyk7XCIgZGF0YS10YXJnZXQtaWQ9XCJleHBsYWluLSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKCRjb250ZXh0WyJpIl0sICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiLSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJsb29wIl0sICJwYXJlbnQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI0MCksICJsb29wIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNDApLCAiaW5kZXgiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI0MCksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiXCI+RXhwbGFpbiBxdWVyeTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI0MgogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjQzCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbInF1ZXJ5Il0sICJiYWNrdHJhY2UiLCBbXSwgImFueSIsIHRydWUsIHRydWUsIGZhbHNlLCAyNDMpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI0NAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmbmJzcDsmbmJzcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgY2xhc3M9XCJzZi10b2dnbGUgbGluay1pbnZlcnNlXCIgZGF0YS10b2dnbGUtc2VsZWN0b3I9XCIjYmFja3RyYWNlLSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI0NQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZSgkY29udGV4dFsiaSJdLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIi0iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9vcCJdLCAicGFyZW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNDUpLCAibG9vcCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjQ1KSwgImluZGV4IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNDUpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIlwiIGRhdGEtdG9nZ2xlLWFsdC1jb250ZW50PVwiSGlkZSBxdWVyeSBiYWNrdHJhY2VcIj5WaWV3IHF1ZXJ5IGJhY2t0cmFjZTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI0NwogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImZvcm1hdHRlZC1xdWVyeS0iOwogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI0OQogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKCRjb250ZXh0WyJpIl0sICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICItIjsKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9vcCJdLCAicGFyZW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNDkpLCAibG9vcCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjQ5KSwgImluZGV4IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNDkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiXCIgY2xhc3M9XCJzcWwtcnVubmFibGUgaGlkZGVuXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjUwCiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5leHRlbnNpb25zWydEb2N0cmluZVxCdW5kbGVcRG9jdHJpbmVCdW5kbGVcVHdpZ1xEb2N0cmluZUV4dGVuc2lvbiddLT5mb3JtYXRTcWwoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJxdWVyeSJdLCAic3FsIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNTApLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBoaWRkZW5cIiBkYXRhLWNsaXBib2FyZC10ZXh0PVwiIjsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyNTEKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZSgkdGhpcy0+ZXh0ZW5zaW9uc1snRG9jdHJpbmVcQnVuZGxlXERvY3RyaW5lQnVuZGxlXFR3aWdcRG9jdHJpbmVFeHRlbnNpb24nXS0+Zm9ybWF0U3FsKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsicXVlcnkiXSwgInNxbCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjUxKSwgZmFsc2UpLCAiaHRtbF9hdHRyIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICJcIj5Db3B5PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjU0CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbInF1ZXJ5Il0sICJydW5uYWJsZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjU0KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyNTUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwib3JpZ2luYWwtcXVlcnktIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoJGNvbnRleHRbImkiXSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICItIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImxvb3AiXSwgInBhcmVudCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjU1KSwgImxvb3AiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI1NSksICJpbmRleCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjU1KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICJcIiBjbGFzcz1cInNxbC1ydW5uYWJsZSBoaWRkZW5cIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI1NgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbInJ1bm5hYmxlX3NxbCJdID0gJHRoaXMtPmV4dGVuc2lvbnNbJ0RvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxUd2lnXERvY3RyaW5lRXh0ZW5zaW9uJ10tPnJlcGxhY2VRdWVyeVBhcmFtZXRlcnMoKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsicXVlcnkiXSwgInNxbCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjU2KSAuICI7IiksIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsicXVlcnkiXSwgInBhcmFtcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjU2KSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI1NwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmV4dGVuc2lvbnNbJ0RvY3RyaW5lXEJ1bmRsZVxEb2N0cmluZUJ1bmRsZVxUd2lnXERvY3RyaW5lRXh0ZW5zaW9uJ10tPnByZXR0aWZ5U3FsKChpc3NldCgkY29udGV4dFsicnVubmFibGVfc3FsIl0pIHx8IGFycmF5X2tleV9leGlzdHMoInJ1bm5hYmxlX3NxbCIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJydW5uYWJsZV9zcWwiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJydW5uYWJsZV9zcWwiIGRvZXMgbm90IGV4aXN0LicsIDI1NywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGhpZGRlblwiIGRhdGEtY2xpcGJvYXJkLXRleHQ9XCIiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyNTgKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoKGlzc2V0KCRjb250ZXh0WyJydW5uYWJsZV9zcWwiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygicnVubmFibGVfc3FsIiwgJGNvbnRleHQpID8gJGNvbnRleHRbInJ1bm5hYmxlX3NxbCJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgInJ1bm5hYmxlX3NxbCIgZG9lcyBub3QgZXhpc3QuJywgMjU4LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJodG1sX2F0dHIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICJcIj5Db3B5PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyNjEKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjYyCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbInF1ZXJ5Il0sICJleHBsYWluYWJsZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjYyKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyNjMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiZXhwbGFpbi0iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZSgkY29udGV4dFsiaSJdLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIi0iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9vcCJdLCAicGFyZW50IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNjMpLCAibG9vcCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjYzKSwgImluZGV4IiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNjMpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIlwiIGNsYXNzPVwic3FsLWV4cGxhaW5cIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjY1CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI2NgogICAgICAgICAgICAgICAgICAgICAgICBpZiAoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJxdWVyeSJdLCAiYmFja3RyYWNlIiwgW10sICJhbnkiLCB0cnVlLCB0cnVlLCBmYWxzZSwgMjY2KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyNjcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiYmFja3RyYWNlLSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKCRjb250ZXh0WyJpIl0sICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiLSI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJsb29wIl0sICJwYXJlbnQiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI2NyksICJsb29wIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyNjcpLCAiaW5kZXgiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI2NyksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiXCIgY2xhc3M9XCJoaWRkZW5cIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9XCJjb2xcIj4jPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+RmlsZS9DYWxsPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI3NgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbJ19wYXJlbnQnXSA9ICRjb250ZXh0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbJ19zZXEnXSA9IENvcmVFeHRlbnNpb246OmVuc3VyZVRyYXZlcnNhYmxlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsicXVlcnkiXSwgImJhY2t0cmFjZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjc2KSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddID0gWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFyZW50JyA9PiAkY29udGV4dFsnX3BhcmVudCddLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5kZXgwJyA9PiAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5kZXgnICA9PiAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmlyc3QnICA9PiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc19hcnJheSgkY29udGV4dFsnX3NlcSddKSB8fCAoaXNfb2JqZWN0KCRjb250ZXh0Wydfc2VxJ10pICYmICRjb250ZXh0Wydfc2VxJ10gaW5zdGFuY2VvZiBcQ291bnRhYmxlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsZW5ndGggPSBjb3VudCgkY29udGV4dFsnX3NlcSddKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydyZXZpbmRleDAnXSA9ICRsZW5ndGggLSAxOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ3JldmluZGV4J10gPSAkbGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ2xlbmd0aCddID0gJGxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydsYXN0J10gPSAxID09PSAkbGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yZWFjaCAoJGNvbnRleHRbJ19zZXEnXSBhcyAkY29udGV4dFsiX2tleSJdID0+ICRjb250ZXh0WyJ0cmFjZSJdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyNzcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyNzgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsibG9vcCJdLCAiaW5kZXgiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI3OCksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtc21hbGxcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjgxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbImxpbmVfbnVtYmVyIl0gPSAoKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsidHJhY2UiXSwgImxpbmUiLCBbXSwgImFueSIsIHRydWUsIHRydWUsIGZhbHNlLCAyODEpKSA/IChUd2lnXEV4dGVuc2lvblxDb3JlRXh0ZW5zaW9uOjpkZWZhdWx0KENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsidHJhY2UiXSwgImxpbmUiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI4MSksIDEpKSA6ICgxKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyODIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbInRyYWNlIl0sICJmaWxlIiwgW10sICJhbnkiLCB0cnVlLCB0cnVlLCBmYWxzZSwgMjgyKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI4MwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoJHRoaXMtPmV4dGVuc2lvbnNbJ1N5bWZvbnlcQnJpZGdlXFR3aWdcRXh0ZW5zaW9uXENvZGVFeHRlbnNpb24nXS0+Z2V0RmlsZUxpbmsoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJ0cmFjZSJdLCAiZmlsZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMjgzKSwgKGlzc2V0KCRjb250ZXh0WyJsaW5lX251bWJlciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJsaW5lX251bWJlciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJsaW5lX251bWJlciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImxpbmVfbnVtYmVyIiBkb2VzIG5vdCBleGlzdC4nLCAyODMsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICJcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDI4NQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoKCgoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJ0cmFjZSJdLCAiY2xhc3MiLCBbXSwgImFueSIsIHRydWUsIHRydWUsIGZhbHNlLCAyODUpKSA/IChUd2lnXEV4dGVuc2lvblxDb3JlRXh0ZW5zaW9uOjpkZWZhdWx0KENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsidHJhY2UiXSwgImNsYXNzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAyODUpKSkgOiAoIiIpKSAuICgoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJ0cmFjZSJdLCAiY2xhc3MiLCBbXSwgImFueSIsIHRydWUsIHRydWUsIGZhbHNlLCAyODUpKSA/ICgoKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsidHJhY2UiXSwgInR5cGUiLCBbXSwgImFueSIsIHRydWUsIHRydWUsIGZhbHNlLCAyODUpKSA/IChUd2lnXEV4dGVuc2lvblxDb3JlRXh0ZW5zaW9uOjpkZWZhdWx0KENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsidHJhY2UiXSwgInR5cGUiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI4NSksICI6OiIpKSA6ICgiOjoiKSkpIDogKCIiKSkpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjg2CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIjxzcGFuIGNsYXNzPVwic3RhdHVzLXdhcm5pbmdcIj4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJ0cmFjZSJdLCAiZnVuY3Rpb24iLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDI4NiksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjg3CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsidHJhY2UiXSwgImZpbGUiLCBbXSwgImFueSIsIHRydWUsIHRydWUsIGZhbHNlLCAyODcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjg4CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyOTAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobGluZSAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoKGlzc2V0KCRjb250ZXh0WyJsaW5lX251bWJlciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJsaW5lX251bWJlciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJsaW5lX251bWJlciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImxpbmVfbnVtYmVyIiBkb2VzIG5vdCBleGlzdC4nLCAyOTAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsrJGNvbnRleHRbJ2xvb3AnXVsnaW5kZXgwJ107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyskY29udGV4dFsnbG9vcCddWydpbmRleCddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ2ZpcnN0J10gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJGNvbnRleHRbJ2xvb3AnXVsnbGVuZ3RoJ10pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgwJ107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXVsnbGFzdCddID0gMCA9PT0gJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgwJ107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF9wYXJlbnQgPSAkY29udGV4dFsnX3BhcmVudCddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zZXQoJGNvbnRleHRbJ19zZXEnXSwgJGNvbnRleHRbJ19pdGVyYXRlZCddLCAkY29udGV4dFsnX2tleSddLCAkY29udGV4dFsndHJhY2UnXSwgJGNvbnRleHRbJ19wYXJlbnQnXSwgJGNvbnRleHRbJ2xvb3AnXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29udGV4dCA9IGFycmF5X2ludGVyc2VjdF9rZXkoJGNvbnRleHQsICRfcGFyZW50KSArICRfcGFyZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAyOTUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMjk5CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICArKyRjb250ZXh0Wydsb29wJ11bJ2luZGV4MCddOwogICAgICAgICAgICAgICAgICAgICAgICArKyRjb250ZXh0Wydsb29wJ11bJ2luZGV4J107CiAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ2ZpcnN0J10gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzc2V0KCRjb250ZXh0Wydsb29wJ11bJ2xlbmd0aCddKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0kY29udGV4dFsnbG9vcCddWydyZXZpbmRleDAnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZXh0Wydsb29wJ11bJ2xhc3QnXSA9IDAgPT09ICRjb250ZXh0Wydsb29wJ11bJ3JldmluZGV4MCddOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICRfcGFyZW50ID0gJGNvbnRleHRbJ19wYXJlbnQnXTsKICAgICAgICAgICAgICAgICAgICB1bnNldCgkY29udGV4dFsnX3NlcSddLCAkY29udGV4dFsnX2l0ZXJhdGVkJ10sICRjb250ZXh0WydpJ10sICRjb250ZXh0WydxdWVyeSddLCAkY29udGV4dFsnX3BhcmVudCddLCAkY29udGV4dFsnbG9vcCddKTsKICAgICAgICAgICAgICAgICAgICAkY29udGV4dCA9IGFycmF5X2ludGVyc2VjdF9rZXkoJGNvbnRleHQsICRfcGFyZW50KSArICRfcGFyZW50OwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMzAyCiAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBsaW5lIDMwNQogICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICsrJGNvbnRleHRbJ2xvb3AnXVsnaW5kZXgwJ107CiAgICAgICAgICAgICAgICArKyRjb250ZXh0Wydsb29wJ11bJ2luZGV4J107CiAgICAgICAgICAgICAgICAkY29udGV4dFsnbG9vcCddWydmaXJzdCddID0gZmFsc2U7CiAgICAgICAgICAgICAgICBpZiAoaXNzZXQoJGNvbnRleHRbJ2xvb3AnXVsnbGVuZ3RoJ10pKSB7CiAgICAgICAgICAgICAgICAgICAgLS0kY29udGV4dFsnbG9vcCddWydyZXZpbmRleDAnXTsKICAgICAgICAgICAgICAgICAgICAtLSRjb250ZXh0Wydsb29wJ11bJ3JldmluZGV4J107CiAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbJ2xvb3AnXVsnbGFzdCddID0gMCA9PT0gJGNvbnRleHRbJ2xvb3AnXVsncmV2aW5kZXgwJ107CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJF9wYXJlbnQgPSAkY29udGV4dFsnX3BhcmVudCddOwogICAgICAgICAgICB1bnNldCgkY29udGV4dFsnX3NlcSddLCAkY29udGV4dFsnX2l0ZXJhdGVkJ10sICRjb250ZXh0Wydjb25uZWN0aW9uJ10sICRjb250ZXh0WydxdWVyaWVzJ10sICRjb250ZXh0WydfcGFyZW50J10sICRjb250ZXh0Wydsb29wJ10pOwogICAgICAgICAgICAkY29udGV4dCA9IGFycmF5X2ludGVyc2VjdF9rZXkoJGNvbnRleHQsICRfcGFyZW50KSArICRfcGFyZW50OwogICAgICAgICAgICAvLyBsaW5lIDMwNgogICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICI7CiAgICAgICAgfQogICAgICAgIC8vIGxpbmUgMzA3CiAgICAgICAgeWllbGQgIiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPVwidGFiICI7CiAgICAgICAgLy8gbGluZSAzMTAKICAgICAgICB5aWVsZCAoKFR3aWdcRXh0ZW5zaW9uXENvcmVFeHRlbnNpb246OnRlc3RFbXB0eShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMzEwLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjb25uZWN0aW9ucyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzEwKSkpID8gKCJkaXNhYmxlZCIpIDogKCIiKSk7CiAgICAgICAgeWllbGQgIlwiPgogICAgICAgICAgICA8aDMgY2xhc3M9XCJ0YWItdGl0bGVcIj5EYXRhYmFzZSBDb25uZWN0aW9uczwvaDM+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDMxMwogICAgICAgIGlmICggIUNvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzMTMsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvbm5lY3Rpb25zIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzMTMpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgMzE0CiAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5UaGVyZSBhcmUgbm8gY29uZmlndXJlZCBkYXRhYmFzZSBjb25uZWN0aW9ucy48L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGxpbmUgMzE4CiAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIHlpZWxkIENvcmVFeHRlbnNpb246OmNhbGxNYWNybygkbWFjcm9zWyJoZWxwZXIiXSwgIm1hY3JvX3JlbmRlcl9zaW1wbGVfdGFibGUiLCBbIk5hbWUiLCAiU2VydmljZSIsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzMTgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNvbm5lY3Rpb25zIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzMTgpXSwgMzE4LCAkY29udGV4dCwgJHRoaXMtPmdldFNvdXJjZUNvbnRleHQoKSk7CiAgICAgICAgICAgIHlpZWxkICIKICAgICAgICAgICAgICAgICI7CiAgICAgICAgfQogICAgICAgIC8vIGxpbmUgMzIwCiAgICAgICAgeWllbGQgIiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPVwidGFiICI7CiAgICAgICAgLy8gbGluZSAzMjMKICAgICAgICB5aWVsZCAoKFR3aWdcRXh0ZW5zaW9uXENvcmVFeHRlbnNpb246OnRlc3RFbXB0eShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMzIzLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJtYW5hZ2VycyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzIzKSkpID8gKCJkaXNhYmxlZCIpIDogKCIiKSk7CiAgICAgICAgeWllbGQgIlwiPgogICAgICAgICAgICA8aDMgY2xhc3M9XCJ0YWItdGl0bGVcIj5FbnRpdHkgTWFuYWdlcnM8L2gzPgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIj4KCiAgICAgICAgICAgICAgICAiOwogICAgICAgIC8vIGxpbmUgMzI3CiAgICAgICAgaWYgKCAhQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDMyNywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAibWFuYWdlcnMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDMyNykpIHsKICAgICAgICAgICAgLy8gbGluZSAzMjgKICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlRoZXJlIGFyZSBubyBjb25maWd1cmVkIGVudGl0eSBtYW5hZ2Vycy48L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAiOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIGxpbmUgMzMyCiAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIHlpZWxkIENvcmVFeHRlbnNpb246OmNhbGxNYWNybygkbWFjcm9zWyJoZWxwZXIiXSwgIm1hY3JvX3JlbmRlcl9zaW1wbGVfdGFibGUiLCBbIk5hbWUiLCAiU2VydmljZSIsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzMzIsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgIm1hbmFnZXJzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzMzIpXSwgMzMyLCAkY29udGV4dCwgJHRoaXMtPmdldFNvdXJjZUNvbnRleHQoKSk7CiAgICAgICAgICAgIHlpZWxkICIKICAgICAgICAgICAgICAgICI7CiAgICAgICAgfQogICAgICAgIC8vIGxpbmUgMzM0CiAgICAgICAgeWllbGQgIiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPVwidGFiICI7CiAgICAgICAgLy8gbGluZSAzMzcKICAgICAgICB5aWVsZCAoKCAhQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDMzNywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY2FjaGVFbmFibGVkIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzMzcpKSA/ICgiZGlzYWJsZWQiKSA6ICgiIikpOwogICAgICAgIHlpZWxkICJcIj4KICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+U2Vjb25kIExldmVsIENhY2hlPC9oMz4KICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCI+CgogICAgICAgICAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDM0MQogICAgICAgIGlmICggIUNvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzNDEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNhY2hlRW5hYmxlZCIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzQxKSkgewogICAgICAgICAgICAvLyBsaW5lIDM0MgogICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+U2Vjb25kIExldmVsIENhY2hlIGlzIG5vdCBlbmFibGVkLjwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICI7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gbGluZSAzNDYKICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgaWYgKCAhQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDM0NiwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY2FjaGVDb3VudHMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM0NikpIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMzQ3CiAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5TZWNvbmQgbGV2ZWwgY2FjaGUgaW5mb3JtYXRpb24gaXMgbm90IGF2YWlsYWJsZS48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDM1MQogICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNzXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPiI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDM1MwogICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDM1MywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY2FjaGVDb3VudHMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM1MyksICJoaXRzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNTMpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgeWllbGQgIjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+SGl0czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCI+IjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMzU4CiAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMzU4LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjYWNoZUNvdW50cyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzU4KSwgIm1pc3NlcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzU4KSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIHlpZWxkICI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbFwiPk1pc3Nlczwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCI+IjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMzYzCiAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMzYzLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjYWNoZUNvdW50cyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzYzKSwgInB1dHMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM2MyksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB5aWVsZCAiPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGFiZWxcIj5QdXRzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMzY4CiAgICAgICAgICAgICAgICBpZiAoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzNjgsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNhY2hlUmVnaW9ucyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzY4KSwgImhpdHMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM2OCkpIHsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDM2OQogICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPk51bWJlciBvZiBjYWNoZSBoaXRzPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAzNzAKICAgICAgICAgICAgICAgICAgICB5aWVsZCBDb3JlRXh0ZW5zaW9uOjpjYWxsTWFjcm8oJG1hY3Jvc1siaGVscGVyIl0sICJtYWNyb19yZW5kZXJfc2ltcGxlX3RhYmxlIiwgWyJSZWdpb24iLCAiSGl0cyIsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMzcwLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjYWNoZVJlZ2lvbnMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM3MCksICJoaXRzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNzApXSwgMzcwLCAkY29udGV4dCwgJHRoaXMtPmdldFNvdXJjZUNvbnRleHQoKSk7CiAgICAgICAgICAgICAgICAgICAgeWllbGQgIgogICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gbGluZSAzNzIKICAgICAgICAgICAgICAgIHlpZWxkICIKICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgMzczCiAgICAgICAgICAgICAgICBpZiAoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzNzMsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNhY2hlUmVnaW9ucyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzczKSwgIm1pc3NlcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzczKSkgewogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMzc0CiAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+TnVtYmVyIG9mIGNhY2hlIG1pc3NlczwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMzc1CiAgICAgICAgICAgICAgICAgICAgeWllbGQgQ29yZUV4dGVuc2lvbjo6Y2FsbE1hY3JvKCRtYWNyb3NbImhlbHBlciJdLCAibWFjcm9fcmVuZGVyX3NpbXBsZV90YWJsZSIsIFsiUmVnaW9uIiwgIk1pc3NlcyIsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMzc1LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJjYWNoZVJlZ2lvbnMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM3NSksICJtaXNzZXMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM3NSldLCAzNzUsICRjb250ZXh0LCAkdGhpcy0+Z2V0U291cmNlQ29udGV4dCgpKTsKICAgICAgICAgICAgICAgICAgICB5aWVsZCAiCiAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBsaW5lIDM3NwogICAgICAgICAgICAgICAgeWllbGQgIgogICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgLy8gbGluZSAzNzgKICAgICAgICAgICAgICAgIGlmIChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDM3OCwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiY2FjaGVSZWdpb25zIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzNzgpLCAicHV0cyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzc4KSkgewogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgMzc5CiAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+TnVtYmVyIG9mIGNhY2hlIHB1dHM8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDM4MAogICAgICAgICAgICAgICAgICAgIHlpZWxkIENvcmVFeHRlbnNpb246OmNhbGxNYWNybygkbWFjcm9zWyJoZWxwZXIiXSwgIm1hY3JvX3JlbmRlcl9zaW1wbGVfdGFibGUiLCBbIlJlZ2lvbiIsICJQdXRzIiwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzODAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImNhY2hlUmVnaW9ucyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzgwKSwgInB1dHMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM4MCldLCAzODAsICRjb250ZXh0LCAkdGhpcy0+Z2V0U291cmNlQ29udGV4dCgpKTsKICAgICAgICAgICAgICAgICAgICB5aWVsZCAiCiAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAvLyBsaW5lIDM4MgogICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBsaW5lIDM4MwogICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICI7CiAgICAgICAgfQogICAgICAgIC8vIGxpbmUgMzg0CiAgICAgICAgeWllbGQgIiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPVwidGFiICI7CiAgICAgICAgLy8gbGluZSAzODcKICAgICAgICB5aWVsZCAoKCAhQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDM4NywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAiZW50aXRpZXMiLCBbXSwgImFueSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDM4NykpID8gKCJkaXNhYmxlZCIpIDogKCIiKSk7CiAgICAgICAgeWllbGQgIlwiPgogICAgICAgICAgICA8aDMgY2xhc3M9XCJ0YWItdGl0bGVcIj5FbnRpdGllcyBNYXBwaW5nPC9oMz4KICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCI+CgogICAgICAgICAgICAgICAgIjsKICAgICAgICAvLyBsaW5lIDM5MQogICAgICAgIGlmICggIUNvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzOTEsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImVudGl0aWVzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzOTEpKSB7CiAgICAgICAgICAgIC8vIGxpbmUgMzkyCiAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5ObyBtYXBwZWQgZW50aXRpZXMuPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgIjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAvLyBsaW5lIDM5NgogICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAkY29udGV4dFsnX3BhcmVudCddID0gJGNvbnRleHQ7CiAgICAgICAgICAgICRjb250ZXh0Wydfc2VxJ10gPSBDb3JlRXh0ZW5zaW9uOjplbnN1cmVUcmF2ZXJzYWJsZShDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgKGlzc2V0KCRjb250ZXh0WyJjb2xsZWN0b3IiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29sbGVjdG9yIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbGxlY3RvciJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbGxlY3RvciIgZG9lcyBub3QgZXhpc3QuJywgMzk2LCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJlbnRpdGllcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMzk2KSk7CiAgICAgICAgICAgIGZvcmVhY2ggKCRjb250ZXh0Wydfc2VxJ10gYXMgJGNvbnRleHRbIm1hbmFnZXIiXSA9PiAkY29udGV4dFsiY2xhc3NlcyJdKSB7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDM5NwogICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICBpZiAoKFR3aWdcRXh0ZW5zaW9uXENvcmVFeHRlbnNpb246Omxlbmd0aCgkdGhpcy0+ZW52LT5nZXRDaGFyc2V0KCksIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoaXNzZXQoJGNvbnRleHRbImNvbGxlY3RvciJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJjb2xsZWN0b3IiLCAkY29udGV4dCkgPyAkY29udGV4dFsiY29sbGVjdG9yIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAiY29sbGVjdG9yIiBkb2VzIG5vdCBleGlzdC4nLCAzOTcsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgIm1hbmFnZXJzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAzOTcpKSA+IDEpKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gbGluZSAzOTgKICAgICAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMz4iOwogICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoJGNvbnRleHRbIm1hbmFnZXIiXSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICB5aWVsZCAiIDxzbWFsbD5lbnRpdHkgbWFuYWdlcjwvc21hbGw+PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vIGxpbmUgNDAwCiAgICAgICAgICAgICAgICB5aWVsZCAiCiAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDQwMQogICAgICAgICAgICAgICAgaWYgKFR3aWdcRXh0ZW5zaW9uXENvcmVFeHRlbnNpb246OnRlc3RFbXB0eSgkY29udGV4dFsiY2xhc3NlcyJdKSkgewogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgNDAyCiAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5ObyBsb2FkZWQgZW50aXRpZXMuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgNDA2CiAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+Q2xhc3M8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9XCJjb2xcIj5NYXBwaW5nIGVycm9yczwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgNDE0CiAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbJ19wYXJlbnQnXSA9ICRjb250ZXh0OwogICAgICAgICAgICAgICAgICAgICRjb250ZXh0Wydfc2VxJ10gPSBDb3JlRXh0ZW5zaW9uOjplbnN1cmVUcmF2ZXJzYWJsZSgkY29udGV4dFsiY2xhc3NlcyJdKTsKICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkY29udGV4dFsnX3NlcSddIGFzICRjb250ZXh0WyJfa2V5Il0gPT4gJGNvbnRleHRbImNsYXNzIl0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSA0MTUKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZXh0WyJjb250YWluc19lcnJvcnMiXSA9IChDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICgkY29udGV4dFsiY29sbGVjdG9yIl0gPz8gbnVsbCksICJtYXBwaW5nRXJyb3JzIiwgW10sICJhbnkiLCBmYWxzZSwgdHJ1ZSwgZmFsc2UsIDQxNSksICRjb250ZXh0WyJtYW5hZ2VyIl0sIFtdLCAiYXJyYXkiLCB0cnVlLCB0cnVlLCBmYWxzZSwgNDE1KSAmJiBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAoJGNvbnRleHRbImNvbGxlY3RvciJdID8/IG51bGwpLCAibWFwcGluZ0Vycm9ycyIsIFtdLCAiYW55IiwgZmFsc2UsIHRydWUsIGZhbHNlLCA0MTUpLCAkY29udGV4dFsibWFuYWdlciJdLCBbXSwgImFycmF5IiwgZmFsc2UsIHRydWUsIGZhbHNlLCA0MTUpLCBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgJGNvbnRleHRbImNsYXNzIl0sICJjbGFzcyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNDE1KSwgW10sICJhcnJheSIsIHRydWUsIHRydWUsIGZhbHNlLCA0MTUpKTsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSA0MTYKICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz1cIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICgoKGlzc2V0KCRjb250ZXh0WyJjb250YWluc19lcnJvcnMiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygiY29udGFpbnNfZXJyb3JzIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImNvbnRhaW5zX2Vycm9ycyJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImNvbnRhaW5zX2Vycm9ycyIgZG9lcyBub3QgZXhpc3QuJywgNDE2LCAkdGhpcy0+c291cmNlKTsgfSkoKSkpID8gKCJzdGF0dXMtZXJyb3IiKSA6ICgiIikpOwogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgNDE4CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoJHRoaXMtPmV4dGVuc2lvbnNbJ1N5bWZvbnlcQnJpZGdlXFR3aWdcRXh0ZW5zaW9uXENvZGVFeHRlbnNpb24nXS0+Z2V0RmlsZUxpbmsoQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJjbGFzcyJdLCAiZmlsZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNDE4KSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsICRjb250ZXh0WyJjbGFzcyJdLCAibGluZSIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNDE4KSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICJcIj4iOwogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsiY2xhc3MiXSwgImNsYXNzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA0MTgpLCAiaHRtbCIsIG51bGwsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCAiPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImZvbnQtbm9ybWFsXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSA0MjEKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChpc3NldCgkY29udGV4dFsiY29udGFpbnNfZXJyb3JzIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbnRhaW5zX2Vycm9ycyIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb250YWluc19lcnJvcnMiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb250YWluc19lcnJvcnMiIGRvZXMgbm90IGV4aXN0LicsIDQyMSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDQyMgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDQyMwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbJ19wYXJlbnQnXSA9ICRjb250ZXh0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvbnRleHRbJ19zZXEnXSA9IENvcmVFeHRlbnNpb246OmVuc3VyZVRyYXZlcnNhYmxlKENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCBDb3JlRXh0ZW5zaW9uOjpnZXRBdHRyaWJ1dGUoJHRoaXMtPmVudiwgJHRoaXMtPnNvdXJjZSwgQ29yZUV4dGVuc2lvbjo6Z2V0QXR0cmlidXRlKCR0aGlzLT5lbnYsICR0aGlzLT5zb3VyY2UsIChpc3NldCgkY29udGV4dFsiY29sbGVjdG9yIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImNvbGxlY3RvciIsICRjb250ZXh0KSA/ICRjb250ZXh0WyJjb2xsZWN0b3IiXSA6IChmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBSdW50aW1lRXJyb3IoJ1ZhcmlhYmxlICJjb2xsZWN0b3IiIGRvZXMgbm90IGV4aXN0LicsIDQyMywgJHRoaXMtPnNvdXJjZSk7IH0pKCkpLCAibWFwcGluZ0Vycm9ycyIsIFtdLCAiYW55IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNDIzKSwgJGNvbnRleHRbIm1hbmFnZXIiXSwgW10sICJhcnJheSIsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIDQyMyksIENvcmVFeHRlbnNpb246OmdldEF0dHJpYnV0ZSgkdGhpcy0+ZW52LCAkdGhpcy0+c291cmNlLCAkY29udGV4dFsiY2xhc3MiXSwgImNsYXNzIiwgW10sICJhbnkiLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCA0MjMpLCBbXSwgImFycmF5IiwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgNDIzKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JlYWNoICgkY29udGV4dFsnX3NlcSddIGFzICRjb250ZXh0WyJfa2V5Il0gPT4gJGNvbnRleHRbImVycm9yIl0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDQyNAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoJGNvbnRleHRbImVycm9yIl0sICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIjwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJF9wYXJlbnQgPSAkY29udGV4dFsnX3BhcmVudCddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zZXQoJGNvbnRleHRbJ19zZXEnXSwgJGNvbnRleHRbJ19pdGVyYXRlZCddLCAkY29udGV4dFsnX2tleSddLCAkY29udGV4dFsnZXJyb3InXSwgJGNvbnRleHRbJ19wYXJlbnQnXSwgJGNvbnRleHRbJ2xvb3AnXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29udGV4dCA9IGFycmF5X2ludGVyc2VjdF9rZXkoJGNvbnRleHQsICRfcGFyZW50KSArICRfcGFyZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGluZSA0MjYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDQyOAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vIGVycm9ycy4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpbmUgNDMwCiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAkX3BhcmVudCA9ICRjb250ZXh0WydfcGFyZW50J107CiAgICAgICAgICAgICAgICAgICAgdW5zZXQoJGNvbnRleHRbJ19zZXEnXSwgJGNvbnRleHRbJ19pdGVyYXRlZCddLCAkY29udGV4dFsnX2tleSddLCAkY29udGV4dFsnY2xhc3MnXSwgJGNvbnRleHRbJ19wYXJlbnQnXSwgJGNvbnRleHRbJ2xvb3AnXSk7CiAgICAgICAgICAgICAgICAgICAgJGNvbnRleHQgPSBhcnJheV9pbnRlcnNlY3Rfa2V5KCRjb250ZXh0LCAkX3BhcmVudCkgKyAkX3BhcmVudDsKICAgICAgICAgICAgICAgICAgICAvLyBsaW5lIDQzMwogICAgICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy8gbGluZSA0MzYKICAgICAgICAgICAgICAgIHlpZWxkICIgICAgICAgICAgICAgICAgICAgICI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJF9wYXJlbnQgPSAkY29udGV4dFsnX3BhcmVudCddOwogICAgICAgICAgICB1bnNldCgkY29udGV4dFsnX3NlcSddLCAkY29udGV4dFsnX2l0ZXJhdGVkJ10sICRjb250ZXh0WydtYW5hZ2VyJ10sICRjb250ZXh0WydjbGFzc2VzJ10sICRjb250ZXh0WydfcGFyZW50J10sICRjb250ZXh0Wydsb29wJ10pOwogICAgICAgICAgICAkY29udGV4dCA9IGFycmF5X2ludGVyc2VjdF9rZXkoJGNvbnRleHQsICRfcGFyZW50KSArICRfcGFyZW50OwogICAgICAgICAgICAvLyBsaW5lIDQzNwogICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgICAgICI7CiAgICAgICAgfQogICAgICAgIC8vIGxpbmUgNDM4CiAgICAgICAgeWllbGQgIiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+Ly88IVtDREFUQVsKICAgICAgICBmdW5jdGlvbiBleHBsYWluKGxpbmspIHsKICAgICAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7CgogICAgICAgICAgICB2YXIgdGFyZ2V0SWQgPSBsaW5rLmdldEF0dHJpYnV0ZSgnZGF0YS10YXJnZXQtaWQnKTsKICAgICAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXRJZCk7CgogICAgICAgICAgICBpZiAodGFyZ2V0RWxlbWVudC5zdHlsZS5kaXNwbGF5ICE9ICdibG9jaycpIHsKICAgICAgICAgICAgICAgIGlmICh0YXJnZXRFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zZnVybCcpICE9PSBsaW5rLmhyZWYpIHsKICAgICAgICAgICAgICAgICAgICBmZXRjaChsaW5rLmhyZWYsIHsKICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogeydYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0J30KICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGFzeW5jIGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50LmlubmVySFRNTCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKQogICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zZnVybCcsIGxpbmsuaHJlZikKICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnQuaW5uZXJIVE1MID0gJ0FuIGVycm9yIG9jY3VycmVkIHdoaWxlIGxvYWRpbmcgdGhlIHF1ZXJ5IGV4cGxhbmF0aW9uLic7CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgbGluay5pbm5lckhUTUwgPSAnSGlkZSBxdWVyeSBleHBsYW5hdGlvbic7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICBsaW5rLmlubmVySFRNTCA9ICdFeHBsYWluIHF1ZXJ5JzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gc29ydFRhYmxlKGhlYWRlciwgY29sdW1uLCB0YXJnZXRJZCkgewogICAgICAgICAgICBcInVzZSBzdHJpY3RcIjsKCiAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBwYXJzZUludChoZWFkZXIuZ2V0QXR0cmlidXRlKCdkYXRhLXNvcnQtZGlyZWN0aW9uJykpIHx8IDEsCiAgICAgICAgICAgICAgICBpdGVtcyA9IFtdLAogICAgICAgICAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGFyZ2V0SWQpLAogICAgICAgICAgICAgICAgcm93cyA9IHRhcmdldC5jaGlsZHJlbiwKICAgICAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXIucGFyZW50RWxlbWVudC5jaGlsZHJlbiwKICAgICAgICAgICAgICAgIGk7CgogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgaXRlbXMucHVzaChyb3dzW2ldKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGhlYWRlcnMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICAgIGhlYWRlcnNbaV0ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNvcnQtZGlyZWN0aW9uJyk7CiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyc1tpXS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgaGVhZGVyc1tpXS5jaGlsZHJlblswXS5pbm5lckhUTUwgPSAnJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgaGVhZGVyLnNldEF0dHJpYnV0ZSgnZGF0YS1zb3J0LWRpcmVjdGlvbicsICgtMSpkaXJlY3Rpb24pLnRvU3RyaW5nKCkpOwogICAgICAgICAgICBoZWFkZXIuY2hpbGRyZW5bMF0uaW5uZXJIVE1MID0gZGlyZWN0aW9uID4gMCA/ICc8c3BhbiBjbGFzcz1cInRleHQtbXV0ZWRcIj4mIzk2NTA7PC9zcGFuPicgOiAnPHNwYW4gY2xhc3M9XCJ0ZXh0LW11dGVkXCI+JiM5NjYwOzwvc3Bhbj4nOwoKICAgICAgICAgICAgaXRlbXMuc29ydChmdW5jdGlvbihhLCBiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZGlyZWN0aW9uICogKHBhcnNlRmxvYXQoYS5jaGlsZHJlbltjb2x1bW5dLmlubmVySFRNTCkgLSBwYXJzZUZsb2F0KGIuY2hpbGRyZW5bY29sdW1uXS5pbm5lckhUTUwpKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgICAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChpdGVtc1tpXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChuYXZpZ2F0b3IuY2xpcGJvYXJkKSB7CiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWNsaXBib2FyZC10ZXh0XScpLmZvckVhY2goZnVuY3Rpb24oYnV0dG9uKSB7CiAgICAgICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7CiAgICAgICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChidXR0b24uZ2V0QXR0cmlidXRlKCdkYXRhLWNsaXBib2FyZC10ZXh0JykpOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICAvL11dPjwvc2NyaXB0PgoiOwogICAgICAgIAogICAgICAgICRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmLT5sZWF2ZSgkX19pbnRlcm5hbF82ZjQ3YmJlOTk4M2FmODFmMWU3NDUwZTlhM2UzNzY4Zl9wcm9mKTsKCiAgICAgICAgCiAgICAgICAgJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDItPmxlYXZlKCRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyX3Byb2YpOwoKICAgICAgICByZXR1cm47IHlpZWxkICcnOwogICAgfQoKICAgIC8vIGxpbmUgNTE2CiAgICBwdWJsaWMgZnVuY3Rpb24gbWFjcm9fcmVuZGVyX3NpbXBsZV90YWJsZSgkX19sYWJlbDFfXyA9IG51bGwsICRfX2xhYmVsMl9fID0gbnVsbCwgJF9fZGF0YV9fID0gbnVsbCwgLi4uJF9fdmFyYXJnc19fKQogICAgewogICAgICAgICRtYWNyb3MgPSAkdGhpcy0+bWFjcm9zOwogICAgICAgICRjb250ZXh0ID0gJHRoaXMtPmVudi0+bWVyZ2VHbG9iYWxzKFsKICAgICAgICAgICAgImxhYmVsMSIgPT4gJF9fbGFiZWwxX18sCiAgICAgICAgICAgICJsYWJlbDIiID0+ICRfX2xhYmVsMl9fLAogICAgICAgICAgICAiZGF0YSIgPT4gJF9fZGF0YV9fLAogICAgICAgICAgICAidmFyYXJncyIgPT4gJF9fdmFyYXJnc19fLAogICAgICAgIF0pOwoKICAgICAgICAkYmxvY2tzID0gW107CgogICAgICAgIHJldHVybiAoJycgPT09ICR0bXAgPSBcVHdpZ1xFeHRlbnNpb25cQ29yZUV4dGVuc2lvbjo6Y2FwdHVyZU91dHB1dCgoZnVuY3Rpb24gKCkgdXNlICgmJGNvbnRleHQsICRtYWNyb3MsICRibG9ja3MpIHsKICAgICAgICAgICAgJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDIgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnVuZGxlXFxXZWJQcm9maWxlckJ1bmRsZVxcVHdpZ1xcV2ViUHJvZmlsZXJFeHRlbnNpb24iXTsKICAgICAgICAgICAgJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDItPmVudGVyKCRfX2ludGVybmFsXzVhMjdhOGJhMjFjYTc5YjYxOTMyMzc2YjJmYTkyMmQyX3Byb2YgPSBuZXcgXFR3aWdcUHJvZmlsZXJcUHJvZmlsZSgkdGhpcy0+Z2V0VGVtcGxhdGVOYW1lKCksICJtYWNybyIsICJyZW5kZXJfc2ltcGxlX3RhYmxlIikpOwoKICAgICAgICAgICAgJF9faW50ZXJuYWxfNmY0N2JiZTk5ODNhZjgxZjFlNzQ1MGU5YTNlMzc2OGYgPSAkdGhpcy0+ZXh0ZW5zaW9uc1siU3ltZm9ueVxcQnJpZGdlXFxUd2lnXFxFeHRlbnNpb25cXFByb2ZpbGVyRXh0ZW5zaW9uIl07CiAgICAgICAgICAgICRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmLT5lbnRlcigkX19pbnRlcm5hbF82ZjQ3YmJlOTk4M2FmODFmMWU3NDUwZTlhM2UzNzY4Zl9wcm9mID0gbmV3IFxUd2lnXFByb2ZpbGVyXFByb2ZpbGUoJHRoaXMtPmdldFRlbXBsYXRlTmFtZSgpLCAibWFjcm8iLCAicmVuZGVyX3NpbXBsZV90YWJsZSIpKTsKCiAgICAgICAgICAgIC8vIGxpbmUgNTE3CiAgICAgICAgICAgIHlpZWxkICIgICAgPHRhYmxlPgogICAgICAgIDx0aGVhZD4KICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0aCBzY29wZT1cImNvbFwiIGNsYXNzPVwia2V5XCI+IjsKICAgICAgICAgICAgLy8gbGluZSA1MjAKICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZSgoaXNzZXQoJGNvbnRleHRbImxhYmVsMSJdKSB8fCBhcnJheV9rZXlfZXhpc3RzKCJsYWJlbDEiLCAkY29udGV4dCkgPyAkY29udGV4dFsibGFiZWwxIl0gOiAoZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgUnVudGltZUVycm9yKCdWYXJpYWJsZSAibGFiZWwxIiBkb2VzIG5vdCBleGlzdC4nLCA1MjAsICR0aGlzLT5zb3VyY2UpOyB9KSgpKSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgeWllbGQgIjwvdGg+CiAgICAgICAgICAgIDx0aCBzY29wZT1cImNvbFwiPiI7CiAgICAgICAgICAgIC8vIGxpbmUgNTIxCiAgICAgICAgICAgIHlpZWxkICR0aGlzLT5lbnYtPmdldFJ1bnRpbWUoJ1R3aWdcUnVudGltZVxFc2NhcGVyUnVudGltZScpLT5lc2NhcGUoKGlzc2V0KCRjb250ZXh0WyJsYWJlbDIiXSkgfHwgYXJyYXlfa2V5X2V4aXN0cygibGFiZWwyIiwgJGNvbnRleHQpID8gJGNvbnRleHRbImxhYmVsMiJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImxhYmVsMiIgZG9lcyBub3QgZXhpc3QuJywgNTIxLCAkdGhpcy0+c291cmNlKTsgfSkoKSksICJodG1sIiwgbnVsbCwgdHJ1ZSk7CiAgICAgICAgICAgIHlpZWxkICI8L3RoPgogICAgICAgIDwvdHI+CiAgICAgICAgPC90aGVhZD4KICAgICAgICA8dGJvZHk+CiAgICAgICAgIjsKICAgICAgICAgICAgLy8gbGluZSA1MjUKICAgICAgICAgICAgJGNvbnRleHRbJ19wYXJlbnQnXSA9ICRjb250ZXh0OwogICAgICAgICAgICAkY29udGV4dFsnX3NlcSddID0gQ29yZUV4dGVuc2lvbjo6ZW5zdXJlVHJhdmVyc2FibGUoKGlzc2V0KCRjb250ZXh0WyJkYXRhIl0pIHx8IGFycmF5X2tleV9leGlzdHMoImRhdGEiLCAkY29udGV4dCkgPyAkY29udGV4dFsiZGF0YSJdIDogKGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IFJ1bnRpbWVFcnJvcignVmFyaWFibGUgImRhdGEiIGRvZXMgbm90IGV4aXN0LicsIDUyNSwgJHRoaXMtPnNvdXJjZSk7IH0pKCkpKTsKICAgICAgICAgICAgZm9yZWFjaCAoJGNvbnRleHRbJ19zZXEnXSBhcyAkY29udGV4dFsia2V5Il0gPT4gJGNvbnRleHRbInZhbHVlIl0pIHsKICAgICAgICAgICAgICAgIC8vIGxpbmUgNTI2CiAgICAgICAgICAgICAgICB5aWVsZCAiICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwicm93XCI+IjsKICAgICAgICAgICAgICAgIC8vIGxpbmUgNTI3CiAgICAgICAgICAgICAgICB5aWVsZCAkdGhpcy0+ZW52LT5nZXRSdW50aW1lKCdUd2lnXFJ1bnRpbWVcRXNjYXBlclJ1bnRpbWUnKS0+ZXNjYXBlKCRjb250ZXh0WyJrZXkiXSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIHlpZWxkICI8L3RoPgogICAgICAgICAgICAgICAgPHRkPiI7CiAgICAgICAgICAgICAgICAvLyBsaW5lIDUyOAogICAgICAgICAgICAgICAgeWllbGQgJHRoaXMtPmVudi0+Z2V0UnVudGltZSgnVHdpZ1xSdW50aW1lXEVzY2FwZXJSdW50aW1lJyktPmVzY2FwZSgkY29udGV4dFsidmFsdWUiXSwgImh0bWwiLCBudWxsLCB0cnVlKTsKICAgICAgICAgICAgICAgIHlpZWxkICI8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJF9wYXJlbnQgPSAkY29udGV4dFsnX3BhcmVudCddOwogICAgICAgICAgICB1bnNldCgkY29udGV4dFsnX3NlcSddLCAkY29udGV4dFsnX2l0ZXJhdGVkJ10sICRjb250ZXh0WydrZXknXSwgJGNvbnRleHRbJ3ZhbHVlJ10sICRjb250ZXh0WydfcGFyZW50J10sICRjb250ZXh0Wydsb29wJ10pOwogICAgICAgICAgICAkY29udGV4dCA9IGFycmF5X2ludGVyc2VjdF9rZXkoJGNvbnRleHQsICRfcGFyZW50KSArICRfcGFyZW50OwogICAgICAgICAgICAvLyBsaW5lIDUzMQogICAgICAgICAgICB5aWVsZCAiICAgICAgICA8L3Rib2R5PgogICAgPC90YWJsZT4KIjsKICAgICAgICAgICAgCiAgICAgICAgICAgICRfX2ludGVybmFsXzZmNDdiYmU5OTgzYWY4MWYxZTc0NTBlOWEzZTM3NjhmLT5sZWF2ZSgkX19pbnRlcm5hbF82ZjQ3YmJlOTk4M2FmODFmMWU3NDUwZTlhM2UzNzY4Zl9wcm9mKTsKCiAgICAgICAgICAgIAogICAgICAgICAgICAkX19pbnRlcm5hbF81YTI3YThiYTIxY2E3OWI2MTkzMjM3NmIyZmE5MjJkMi0+bGVhdmUoJF9faW50ZXJuYWxfNWEyN2E4YmEyMWNhNzliNjE5MzIzNzZiMmZhOTIyZDJfcHJvZik7CgogICAgICAgICAgICByZXR1cm47IHlpZWxkICcnOwogICAgICAgIH0pKCkpKSA/ICcnIDogbmV3IE1hcmt1cCgkdG1wLCAkdGhpcy0+ZW52LT5nZXRDaGFyc2V0KCkpOwogICAgfQoKICAgIC8qKgogICAgICogQGNvZGVDb3ZlcmFnZUlnbm9yZQogICAgICovCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0VGVtcGxhdGVOYW1lKCkKICAgIHsKICAgICAgICByZXR1cm4gIkBEb2N0cmluZS9Db2xsZWN0b3IvZGIuaHRtbC50d2lnIjsKICAgIH0KCiAgICAvKioKICAgICAqIEBjb2RlQ292ZXJhZ2VJZ25vcmUKICAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIGlzVHJhaXRhYmxlKCkKICAgIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9CgogICAgLyoqCiAgICAgKiBAY29kZUNvdmVyYWdlSWdub3JlCiAgICAgKi8KICAgIHB1YmxpYyBmdW5jdGlvbiBnZXREZWJ1Z0luZm8oKQogICAgewogICAgICAgIHJldHVybiBhcnJheSAoICAxMjgxID0+IDUzMSwgIDEyNzIgPT4gNTI4LCAgMTI2OCA9PiA1MjcsICAxMjY1ID0+IDUyNiwgIDEyNjEgPT4gNTI1LCAgMTI1NCA9PiA1MjEsICAxMjUwID0+IDUyMCwgIDEyNDUgPT4gNTE3LCAgMTIyNSA9PiA1MTYsICAxMTM4ID0+IDQzOCwgIDExMzUgPT4gNDM3LCAgMTEyOSA9PiA0MzYsICAxMTI0ID0+IDQzMywgIDExMTYgPT4gNDMwLCAgMTExMiA9PiA0MjgsICAxMTA4ID0+IDQyNiwgIDEwOTkgPT4gNDI0LCAgMTA5NSA9PiA0MjMsICAxMDkyID0+IDQyMiwgIDEwOTAgPT4gNDIxLCAgMTA4MiA9PiA0MTgsICAxMDc2ID0+IDQxNiwgIDEwNzMgPT4gNDE1LCAgMTA2OSA9PiA0MTQsICAxMDU5ID0+IDQwNiwgIDEwNTMgPT4gNDAyLCAgMTA1MSA9PiA0MDEsICAxMDQ4ID0+IDQwMCwgIDEwNDIgPT4gMzk4LCAgMTAzOSA9PiAzOTcsICAxMDM0ID0+IDM5NiwgIDEwMjggPT4gMzkyLCAgMTAyNiA9PiAzOTEsICAxMDE5ID0+IDM4NywgIDEwMTQgPT4gMzg0LCAgMTAxMSA9PiAzODMsICAxMDA4ID0+IDM4MiwgIDEwMDMgPT4gMzgwLCAgMTAwMCA9PiAzNzksICA5OTggPT4gMzc4LCAgOTk1ID0+IDM3NywgIDk5MCA9PiAzNzUsICA5ODcgPT4gMzc0LCAgOTg1ID0+IDM3MywgIDk4MiA9PiAzNzIsICA5NzcgPT4gMzcwLCAgOTc0ID0+IDM2OSwgIDk3MiA9PiAzNjgsICA5NjQgPT4gMzYzLCAgOTU2ID0+IDM1OCwgIDk0OCA9PiAzNTMsICA5NDQgPT4gMzUxLCAgOTM4ID0+IDM0NywgIDkzNSA9PiAzNDYsICA5MjkgPT4gMzQyLCAgOTI3ID0+IDM0MSwgIDkyMCA9PiAzMzcsICA5MTUgPT4gMzM0LCAgOTA5ID0+IDMzMiwgIDkwMyA9PiAzMjgsICA5MDEgPT4gMzI3LCAgODk0ID0+IDMyMywgIDg4OSA9PiAzMjAsICA4ODMgPT4gMzE4LCAgODc3ID0+IDMxNCwgIDg3NSA9PiAzMTMsICA4NjkgPT4gMzEwLCAgODY0ID0+IDMwNywgIDg2MSA9PiAzMDYsICA4NDcgPT4gMzA1LCAgODQyID0+IDMwMiwgIDgyNiA9PiAyOTksICA4MjAgPT4gMjk1LCAgODAwID0+IDI5MCwgIDc5NiA9PiAyODgsICA3OTQgPT4gMjg3LCAgNzg5ID0+IDI4NiwgIDc4NyA9PiAyODUsICA3ODEgPT4gMjgzLCAgNzc4ID0+IDI4MiwgIDc3NiA9PiAyODEsICA3NzAgPT4gMjc4LCAgNzY3ID0+IDI3NywgIDc1MCA9PiAyNzYsICA3MzUgPT4gMjY3LCAgNzMzID0+IDI2NiwgIDczMCA9PiAyNjUsICA3MjIgPT4gMjYzLCAgNzIwID0+IDI2MiwgIDcxNyA9PiAyNjEsICA3MTEgPT4gMjU4LCAgNzA2ID0+IDI1NywgIDcwNCA9PiAyNTYsICA2OTcgPT4gMjU1LCAgNjk1ID0+IDI1NCwgIDY4OSA9PiAyNTEsICA2ODUgPT4gMjUwLCAgNjc5ID0+IDI0OSwgIDY3NSA9PiAyNDcsICA2NjggPT4gMjQ1LCAgNjY1ID0+IDI0NCwgIDY2MyA9PiAyNDMsICA2NjAgPT4gMjQyLCAgNjUxID0+IDI0MCwgIDY0OCA9PiAyMzksICA2NDYgPT4gMjM4LCAgNjQzID0+IDIzNywgIDYzNiA9PiAyMzUsICA2MzMgPT4gMjM0LCAgNjMxID0+IDIzMywgIDYyNCA9PiAyMzEsICA2MTcgPT4gMjI3LCAgNjExID0+IDIyNCwgIDYwOCA9PiAyMjMsICA2MDMgPT4gMjIxLCAgNTk4ID0+IDIyMCwgIDU5MyA9PiAyMTgsICA1ODYgPT4gMjE2LCAgNTgyID0+IDIxNSwgIDU3OSA9PiAyMTQsICA1NzcgPT4gMjEzLCAgNTcwID0+IDIxMiwgIDU2NyA9PiAyMTEsICA1NTAgPT4gMjEwLCAgNTQ2ID0+IDIwOSwgIDU0MSA9PiAyMDYsICA1MzYgPT4gMjA0LCAgNTMxID0+IDIwMywgIDUyNiA9PiAyMDEsICA1MjEgPT4gMjAwLCAgNTE5ID0+IDE5OSwgIDUxNCA9PiAxOTYsICA1MTEgPT4gMTk1LCAgNTA4ID0+IDE5NCwgIDUwNSA9PiAxOTMsICA0OTkgPT4gMTg5LCAgNDk3ID0+IDE4OCwgIDQ5NCA9PiAxODcsICA0ODggPT4gMTg1LCAgNDg1ID0+IDE4NCwgIDQ2OCA9PiAxODMsICA0NjUgPT4gMTgyLCAgNDU5ID0+IDE4MCwgIDQ1MyA9PiAxNzgsICA0NTAgPT4gMTc3LCAgNDQ0ID0+IDE3MywgIDQ0MiA9PiAxNzIsICA0MzcgPT4gMTY5LCAgNDMzID0+IDE2NywgIDQyOSA9PiAxNjUsICA0MjcgPT4gMTY0LCAgNDI0ID0+IDE2MywgIDQyMiA9PiAxNjIsICA0MTggPT4gMTYxLCAgNDEzID0+IDE1OCwgIDQwNSA9PiAxNTMsICAzOTggPT4gMTQ5LCAgMzkxID0+IDE0NSwgIDM4NyA9PiAxNDMsICAzODUgPT4gMTQyLCAgMzc3ID0+IDEzNywgIDM2OSA9PiAxMzIsICAzNjEgPT4gMTI3LCAgMzUzID0+IDEyMiwgIDM0NCA9PiAxMTUsICAzMzMgPT4gMTA2LCAgMzMxID0+IDEwNSwgIDMyMyA9PiA5OSwgIDMxMyA9PiA5OCwgIDI5OCA9PiA5NCwgIDI5NCA9PiA5MiwgIDI5MiA9PiA5MSwgIDI5MSA9PiA5MCwgIDI5MCA9PiA4OCwgIDI4OCA9PiA4NywgIDI4NSA9PiA4NiwgIDI3NSA9PiA4NSwgIDI2MyA9PiA4MiwgIDI1NyA9PiA3OSwgIDI1NCA9PiA3OCwgIDI1MiA9PiA3NywgIDI0NyA9PiA3NSwgIDI0MCA9PiA3NCwgIDIzMCA9PiA3MywgIDIxNSA9PiA2OCwgIDIxMiA9PiA2NywgIDIwOCA9PiA2NiwgIDIwMSA9PiA2MSwgIDE5MyA9PiA1OCwgIDE4NCA9PiA1NCwgIDE3NyA9PiA1MCwgIDE3MyA9PiA0OCwgIDE3MSA9PiA0NywgIDE2NCA9PiA0NSwgIDE1NyA9PiA0MSwgIDE1MCA9PiAzNywgIDE0MSA9PiAzMywgIDEzNyA9PiAzMSwgIDEzNSA9PiAzMCwgIDEzMiA9PiAyOSwgIDEyOCA9PiAyOCwgIDEyMSA9PiAyNCwgIDExNCA9PiAyMSwgIDEwNyA9PiAxOCwgIDEwNSA9PiAxNywgIDEwMiA9PiAxNiwgIDk2ID0+IDE0LCAgOTAgPT4gMTIsICA4OCA9PiAxMSwgIDg1ID0+IDEwLCAgODIgPT4gOSwgIDgwID0+IDgsICA3NyA9PiA3LCAgNzQgPT4gNiwgIDY0ID0+IDUsICA1NCA9PiAxLCAgNTIgPT4gMywgIDM5ID0+IDEsKTsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gZ2V0U291cmNlQ29udGV4dCgpCiAgICB7CiAgICAgICAgcmV0dXJuIG5ldyBTb3VyY2UoInslIGV4dGVuZHMgcmVxdWVzdC5pc1htbEh0dHBSZXF1ZXN0ID8gJ0BXZWJQcm9maWxlci9Qcm9maWxlci9hamF4X2xheW91dC5odG1sLnR3aWcnIDogJ0BXZWJQcm9maWxlci9Qcm9maWxlci9sYXlvdXQuaHRtbC50d2lnJyAlfQoKeyUgaW1wb3J0IF9zZWxmIGFzIGhlbHBlciAlfQoKeyUgYmxvY2sgdG9vbGJhciAlfQogICAgeyUgaWYgY29sbGVjdG9yLnF1ZXJ5Y291bnQgPiAwIG9yIGNvbGxlY3Rvci5pbnZhbGlkRW50aXR5Q291bnQgPiAwICV9CgogICAgICAgIHslIHNldCBpY29uICV9CiAgICAgICAgICAgIHslIHNldCBzdGF0dXMgPSBjb2xsZWN0b3IuaW52YWxpZEVudGl0eUNvdW50ID4gMCA/ICdyZWQnIDogY29sbGVjdG9yLnF1ZXJ5Y291bnQgPiA1MCA/ICd5ZWxsb3cnICV9CgogICAgICAgICAgICB7JSBpZiBwcm9maWxlcl9tYXJrdXBfdmVyc2lvbiA+PSAzICV9CiAgICAgICAgICAgICAgICB7eyBpbmNsdWRlKCdARG9jdHJpbmUvQ29sbGVjdG9yL2RhdGFiYXNlLnN2ZycpIH19CiAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvblwiPnt7IGluY2x1ZGUoJ0BEb2N0cmluZS9Db2xsZWN0b3IvaWNvbi5zdmcnKSB9fTwvc3Bhbj4KICAgICAgICAgICAgeyUgZW5kaWYgJX0KCiAgICAgICAgICAgIHslIGlmIGNvbGxlY3Rvci5xdWVyeWNvdW50ID09IDAgYW5kIGNvbGxlY3Rvci5pbnZhbGlkRW50aXR5Q291bnQgPiAwICV9CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItdmFsdWVcIj57eyBjb2xsZWN0b3IuaW52YWxpZEVudGl0eUNvdW50IH19PC9zcGFuPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLWxhYmVsXCI+ZXJyb3JzPC9zcGFuPgogICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItdmFsdWVcIj57eyBjb2xsZWN0b3IucXVlcnljb3VudCB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1pbmZvLXBpZWNlLWFkZGl0aW9uYWwtZGV0YWlsXCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLWxhYmVsXCI+aW48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXZhbHVlXCI+e3sgJyUwLjJmJ3xmb3JtYXQoY29sbGVjdG9yLnRpbWUgKiAxMDAwKSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItbGFiZWxcIj5tczwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICB7JSBlbmRzZXQgJX0KCiAgICAgICAgeyUgc2V0IHRleHQgJX0KICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgPGI+RGF0YWJhc2UgUXVlcmllczwvYj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1zdGF0dXMge3sgY29sbGVjdG9yLnF1ZXJ5Y291bnQgPiA1MCA/ICdzZi10b29sYmFyLXN0YXR1cy15ZWxsb3cnIDogJycgfX1cIj57eyBjb2xsZWN0b3IucXVlcnljb3VudCB9fTwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgIDxiPkRpZmZlcmVudCBzdGF0ZW1lbnRzPC9iPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXN0YXR1c1wiPnt7IGNvbGxlY3Rvci5ncm91cGVkUXVlcnlDb3VudCB9fTwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgIDxiPlF1ZXJ5IHRpbWU8L2I+CiAgICAgICAgICAgICAgICA8c3Bhbj57eyAnJTAuMmYnfGZvcm1hdChjb2xsZWN0b3IudGltZSAqIDEwMDApIH19IG1zPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgPGI+SW52YWxpZCBlbnRpdGllczwvYj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1zdGF0dXMge3sgY29sbGVjdG9yLmludmFsaWRFbnRpdHlDb3VudCA+IDAgPyAnc2YtdG9vbGJhci1zdGF0dXMtcmVkJyA6ICcnIH19XCI+e3sgY29sbGVjdG9yLmludmFsaWRFbnRpdHlDb3VudCB9fTwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIHslIGlmIGNvbGxlY3Rvci5jYWNoZUVuYWJsZWQgJX0KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgICAgICA8Yj5DYWNoZSBoaXRzPC9iPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1zdGF0dXMgc2YtdG9vbGJhci1zdGF0dXMtZ3JlZW5cIj57eyBjb2xsZWN0b3IuY2FjaGVIaXRzQ291bnQgfX08L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgICAgICA8Yj5DYWNoZSBtaXNzZXM8L2I+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzZi10b29sYmFyLXN0YXR1cyB7eyBjb2xsZWN0b3IuY2FjaGVNaXNzZXNDb3VudCA+IDAgPyAnc2YtdG9vbGJhci1zdGF0dXMteWVsbG93JyA6ICcnIH19XCI+e3sgY29sbGVjdG9yLmNhY2hlTWlzc2VzQ291bnQgfX08L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZi10b29sYmFyLWluZm8tcGllY2VcIj4KICAgICAgICAgICAgICAgICAgICA8Yj5DYWNoZSBwdXRzPC9iPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic2YtdG9vbGJhci1zdGF0dXMge3sgY29sbGVjdG9yLmNhY2hlUHV0c0NvdW50ID4gMCA/ICdzZi10b29sYmFyLXN0YXR1cy15ZWxsb3cnIDogJycgfX1cIj57eyBjb2xsZWN0b3IuY2FjaGVQdXRzQ291bnQgfX08L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgeyUgZWxzZSAlfQogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNmLXRvb2xiYXItaW5mby1waWVjZVwiPgogICAgICAgICAgICAgICAgICAgIDxiPlNlY29uZCBMZXZlbCBDYWNoZTwvYj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNmLXRvb2xiYXItc3RhdHVzXCI+ZGlzYWJsZWQ8L3NwYW4+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICB7JSBlbmRzZXQgJX0KCiAgICAgICAge3sgaW5jbHVkZSgnQFdlYlByb2ZpbGVyL1Byb2ZpbGVyL3Rvb2xiYXJfaXRlbS5odG1sLnR3aWcnLCB7IGxpbms6IHByb2ZpbGVyX3VybCwgc3RhdHVzOiBzdGF0dXN8ZGVmYXVsdCgnJykgfSkgfX0KCiAgICB7JSBlbmRpZiAlfQp7JSBlbmRibG9jayAlfQoKeyUgYmxvY2sgbWVudSAlfQogICAgPHNwYW4gY2xhc3M9XCJsYWJlbCB7eyBjb2xsZWN0b3IuaW52YWxpZEVudGl0eUNvdW50ID4gMCA/ICdsYWJlbC1zdGF0dXMtZXJyb3InIH19IHt7IGNvbGxlY3Rvci5xdWVyeWNvdW50ID09IDAgPyAnZGlzYWJsZWQnIH19XCI+CiAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uXCI+e3sgaW5jbHVkZSgnQERvY3RyaW5lL0NvbGxlY3Rvci8nIH4gKHByb2ZpbGVyX21hcmt1cF92ZXJzaW9uIDwgMyA/ICdpY29uJyA6ICdkYXRhYmFzZScpIH4gJy5zdmcnKSB9fTwvc3Bhbj4KICAgICAgICA8c3Ryb25nPkRvY3RyaW5lPC9zdHJvbmc+CiAgICAgICAgeyUgaWYgY29sbGVjdG9yLmludmFsaWRFbnRpdHlDb3VudCAlfQogICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNvdW50XCI+CiAgICAgICAgICAgICAgICA8c3Bhbj57eyBjb2xsZWN0b3IuaW52YWxpZEVudGl0eUNvdW50IH19PC9zcGFuPgogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgeyUgZW5kaWYgJX0KICAgIDwvc3Bhbj4KeyUgZW5kYmxvY2sgJX0KCnslIGJsb2NrIHBhbmVsICV9CiAgICB7JSBpZiAnZXhwbGFpbicgPT0gcGFnZSAlfQogICAgICAgIHt7IHJlbmRlcihjb250cm9sbGVyKCdEb2N0cmluZVxcXFxCdW5kbGVcXFxcRG9jdHJpbmVCdW5kbGVcXFxcQ29udHJvbGxlclxcXFxQcm9maWxlckNvbnRyb2xsZXI6OmV4cGxhaW5BY3Rpb24nLCB7CiAgICAgICAgICAgIHRva2VuOiB0b2tlbiwKICAgICAgICAgICAgcGFuZWw6ICdkYicsCiAgICAgICAgICAgIGNvbm5lY3Rpb25OYW1lOiByZXF1ZXN0LnF1ZXJ5LmdldCgnY29ubmVjdGlvbicpLAogICAgICAgICAgICBxdWVyeTogcmVxdWVzdC5xdWVyeS5nZXQoJ3F1ZXJ5JykKICAgICAgICB9KSkgfX0KICAgIHslIGVsc2UgJX0KICAgICAgICB7eyBibG9jaygncXVlcmllcycpIH19CiAgICB7JSBlbmRpZiAlfQp7JSBlbmRibG9jayAlfQoKeyUgYmxvY2sgcXVlcmllcyAlfQogICAgPHN0eWxlPgogICAgICAgIC50aW1lLWNvbnRhaW5lciB7IHBvc2l0aW9uOiByZWxhdGl2ZTsgfQogICAgICAgIC50aW1lLWNvbnRhaW5lciAubm93cmFwIHsgcG9zaXRpb246IHJlbGF0aXZlOyB6LWluZGV4OiAxOyB0ZXh0LXNoYWRvdzogMCAwIDJweCAjZmZmOyB9CiAgICAgICAgLnRpbWUtYmFyIHsgZGlzcGxheTogYmxvY2s7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyBib3R0b206IDA7IGJhY2tncm91bmQ6ICNlMGUwZTA7IH0KICAgICAgICAuc3FsLXJ1bm5hYmxlLnNmLXRvZ2dsZS1jb250ZW50LnNmLXRvZ2dsZS12aXNpYmxlIHsgZGlzcGxheTogZmxleDsgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsgfQogICAgICAgIC5zcWwtcnVubmFibGUgYnV0dG9uIHsgYWxpZ24tc2VsZjogZW5kOyB9CiAgICAgICAgeyUgaWYgcHJvZmlsZXJfbWFya3VwX3ZlcnNpb24gPj0gMyAlfQogICAgICAgIC5oaWdobGlnaHQgLmtleXdvcmQgICB7IGNvbG9yOiB2YXIoLS1oaWdobGlnaHQta2V5d29yZCk7IGZvbnQtd2VpZ2h0OiBib2xkOyB9CiAgICAgICAgLmhpZ2hsaWdodCAud29yZCAgICAgIHsgY29sb3I6IHZhcigtLWNvbG9yLXRleHQpOyB9CiAgICAgICAgLmhpZ2hsaWdodCAudmFyaWFibGUgIHsgY29sb3I6IHZhcigtLWhpZ2hsaWdodC12YXJpYWJsZSk7IH0KICAgICAgICAuaGlnaGxpZ2h0IC5zeW1ib2wgICAgeyBjb2xvcjogdmFyKC0tY29sb3ItdGV4dCk7IH0KICAgICAgICAuaGlnaGxpZ2h0IC5jb21tZW50ICAgeyBjb2xvcjogdmFyKC0taGlnaGxpZ2h0LWNvbW1lbnQpOyB9CiAgICAgICAgLmhpZ2hsaWdodCAuc3RyaW5nICAgIHsgY29sb3I6IHZhcigtLWhpZ2hsaWdodC1zdHJpbmcpOyB9CiAgICAgICAgLmhpZ2hsaWdodCAubnVtYmVyICAgIHsgY29sb3I6IHZhcigtLWhpZ2hsaWdodC1jb25zdGFudCk7IGZvbnQtd2VpZ2h0OiBib2xkOyB9CiAgICAgICAgLmhpZ2hsaWdodCAuZXJyb3IgICAgIHsgY29sb3I6IHZhcigtLWhpZ2hsaWdodC1lcnJvcik7IH0KICAgICAgICB7JSBlbmRpZiAlfQogICAgPC9zdHlsZT4KCiAgICA8aDI+UXVlcnkgTWV0cmljczwvaDI+CgogICAgPGRpdiBjbGFzcz1cIm1ldHJpY3NcIj4KICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljLWdyb3VwXCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNcIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj57eyBjb2xsZWN0b3IucXVlcnljb3VudCB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGFiZWxcIj5EYXRhYmFzZSBRdWVyaWVzPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNcIj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj57eyBjb2xsZWN0b3IuZ3JvdXBlZFF1ZXJ5Q291bnQgfX08L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+RGlmZmVyZW50IHN0YXRlbWVudHM8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPnt7ICclMC4yZid8Zm9ybWF0KGNvbGxlY3Rvci50aW1lICogMTAwMCkgfX0gbXM8L3NwYW4+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+UXVlcnkgdGltZTwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljXCI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCI+e3sgY29sbGVjdG9yLmludmFsaWRFbnRpdHlDb3VudCB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibGFiZWxcIj5JbnZhbGlkIGVudGl0aWVzPC9zcGFuPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgeyUgaWYgY29sbGVjdG9yLmNhY2hlRW5hYmxlZCAlfQogICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljLWdyb3VwXCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljXCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPnt7IGNvbGxlY3Rvci5jYWNoZUhpdHNDb3VudCB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+Q2FjaGUgaGl0czwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj57eyBjb2xsZWN0b3IuY2FjaGVNaXNzZXNDb3VudCB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+Q2FjaGUgbWlzc2VzPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljXCI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2YWx1ZVwiPnt7IGNvbGxlY3Rvci5jYWNoZVB1dHNDb3VudCB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+Q2FjaGUgcHV0czwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICB7JSBlbmRpZiAlfQogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz1cInNmLXRhYnNcIiBzdHlsZT1cIm1hcmdpbi10b3A6IDIwcHg7XCI+CiAgICAgICAgPGRpdiBjbGFzcz1cInRhYiB7eyBjb2xsZWN0b3IucXVlcmllcyBpcyBlbXB0eSA/ICdkaXNhYmxlZCcgfX1cIj4KICAgICAgICAgICAgeyUgc2V0IGdyb3VwX3F1ZXJpZXMgPSByZXF1ZXN0LnF1ZXJ5LmdldEJvb2xlYW4oJ2dyb3VwJykgJX0KICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+CiAgICAgICAgICAgICAgICB7JSBpZiBncm91cF9xdWVyaWVzICV9CiAgICAgICAgICAgICAgICAgICAgR3JvdXBlZCBTdGF0ZW1lbnRzCiAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAgUXVlcmllcwogICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICAgICAgPC9oMz4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgogICAgICAgICAgICAgICAgeyUgaWYgbm90IGNvbGxlY3Rvci5xdWVyaWVzICV9CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk5vIGV4ZWN1dGVkIHF1ZXJpZXMuPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgeyUgZWxzZSAlfQogICAgICAgICAgICAgICAgICAgIHslIGlmIGdyb3VwX3F1ZXJpZXMgJX0KICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGEgaHJlZj1cInt7IHBhdGgoJ19wcm9maWxlcicsIHsgcGFuZWw6ICdkYicsIHRva2VuOiB0b2tlbiB9KSB9fVwiPlNob3cgYWxsIHF1ZXJpZXM8L2E+PC9wPgogICAgICAgICAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgICAgICAgICAgPHA+PGEgaHJlZj1cInt7IHBhdGgoJ19wcm9maWxlcicsIHsgcGFuZWw6ICdkYicsIHRva2VuOiB0b2tlbiwgZ3JvdXA6IHRydWUgfSkgfX1cIj5Hcm91cCBzaW1pbGFyIHN0YXRlbWVudHM8L2E+PC9wPgogICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CgogICAgICAgICAgICAgICAgICAgIHslIGZvciBjb25uZWN0aW9uLCBxdWVyaWVzIGluIGNvbGxlY3Rvci5xdWVyaWVzICV9CiAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIGNvbGxlY3Rvci5jb25uZWN0aW9uc3xsZW5ndGggPiAxICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+e3sgY29ubmVjdGlvbiB9fSA8c21hbGw+Y29ubmVjdGlvbjwvc21hbGw+PC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KCiAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIHF1ZXJpZXMgaXMgZW1wdHkgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPk5vIGRhdGFiYXNlIHF1ZXJpZXMgd2VyZSBwZXJmb3JtZWQuPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIGdyb3VwX3F1ZXJpZXMgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBzZXQgcXVlcmllcyA9IGNvbGxlY3Rvci5ncm91cGVkUXVlcmllc1tjb25uZWN0aW9uXSAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cImFsdCBxdWVyaWVzLXRhYmxlXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgaWYgZ3JvdXBfcXVlcmllcyAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPVwibm93cmFwXCIgb25jbGljaz1cImphdmFzY3JpcHQ6c29ydFRhYmxlKHRoaXMsIDAsICdxdWVyaWVzLXt7IGxvb3AuaW5kZXggfX0nKVwiIGRhdGEtc29ydC1kaXJlY3Rpb249XCIxXCIgc3R5bGU9XCJjdXJzb3I6IHBvaW50ZXI7XCI+VGltZTxzcGFuIGNsYXNzPVwidGV4dC1tdXRlZFwiPiYjOTY2MDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cIm5vd3JhcFwiIG9uY2xpY2s9XCJqYXZhc2NyaXB0OnNvcnRUYWJsZSh0aGlzLCAxLCAncXVlcmllcy17eyBsb29wLmluZGV4IH19JylcIiBzdHlsZT1cImN1cnNvcjogcG9pbnRlcjtcIj5Db3VudDxzcGFuPjwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9XCJub3dyYXBcIiBvbmNsaWNrPVwiamF2YXNjcmlwdDpzb3J0VGFibGUodGhpcywgMCwgJ3F1ZXJpZXMte3sgbG9vcC5pbmRleCB9fScpXCIgZGF0YS1zb3J0LWRpcmVjdGlvbj1cIi0xXCIgc3R5bGU9XCJjdXJzb3I6IHBvaW50ZXI7XCI+IzxzcGFuIGNsYXNzPVwidGV4dC1tdXRlZFwiPiYjOTY1MDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz1cIm5vd3JhcFwiIG9uY2xpY2s9XCJqYXZhc2NyaXB0OnNvcnRUYWJsZSh0aGlzLCAxLCAncXVlcmllcy17eyBsb29wLmluZGV4IH19JylcIiBzdHlsZT1cImN1cnNvcjogcG9pbnRlcjtcIj5UaW1lPHNwYW4+PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBzdHlsZT1cIndpZHRoOiAxMDAlO1wiPkluZm88L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHkgaWQ9XCJxdWVyaWVzLXt7IGxvb3AuaW5kZXggfX1cIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBmb3IgaSwgcXVlcnkgaW4gcXVlcmllcyAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBzZXQgaSA9IGdyb3VwX3F1ZXJpZXMgPyBxdWVyeS5pbmRleCA6IGkgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGlkPVwicXVlcnlOby17eyBpIH19LXt7IGxvb3AucGFyZW50Lmxvb3AuaW5kZXggfX1cIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIGdyb3VwX3F1ZXJpZXMgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJ0aW1lLWNvbnRhaW5lclwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRpbWUtYmFyXCIgc3R5bGU9XCJ3aWR0aDp7eyAnJTAuMmYnfGZvcm1hdChxdWVyeS5leGVjdXRpb25QZXJjZW50KSB9fSVcIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibm93cmFwXCI+e3sgJyUwLjJmJ3xmb3JtYXQocXVlcnkuZXhlY3V0aW9uTVMgKiAxMDAwKSB9fSZuYnNwO21zPGJyIC8+KHt7ICclMC4yZid8Zm9ybWF0KHF1ZXJ5LmV4ZWN1dGlvblBlcmNlbnQpIH19JSk8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJub3dyYXBcIj57eyBxdWVyeS5jb3VudCB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwibm93cmFwXCI+e3sgbG9vcC5pbmRleCB9fTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwibm93cmFwXCI+e3sgJyUwLjJmJ3xmb3JtYXQocXVlcnkuZXhlY3V0aW9uTVMgKiAxMDAwKSB9fSZuYnNwO21zPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgcXVlcnkuc3FsfGRvY3RyaW5lX3ByZXR0aWZ5X3NxbCB9fQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGNsYXNzPVwiZm9udC1ub3JtYWwgdGV4dC1zbWFsbFwiPlBhcmFtZXRlcnM8L3N0cm9uZz46IHt7IHByb2ZpbGVyX2R1bXAocXVlcnkucGFyYW1zLCAyKSB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1zbWFsbCBmb250LW5vcm1hbFwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwic2YtdG9nZ2xlIGxpbmstaW52ZXJzZVwiIGRhdGEtdG9nZ2xlLXNlbGVjdG9yPVwiI2Zvcm1hdHRlZC1xdWVyeS17eyBpIH19LXt7IGxvb3AucGFyZW50Lmxvb3AuaW5kZXggfX1cIiBkYXRhLXRvZ2dsZS1hbHQtY29udGVudD1cIkhpZGUgZm9ybWF0dGVkIHF1ZXJ5XCI+VmlldyBmb3JtYXR0ZWQgcXVlcnk8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBpZiBxdWVyeS5ydW5uYWJsZSAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwic2YtdG9nZ2xlIGxpbmstaW52ZXJzZVwiIGRhdGEtdG9nZ2xlLXNlbGVjdG9yPVwiI29yaWdpbmFsLXF1ZXJ5LXt7IGkgfX0te3sgbG9vcC5wYXJlbnQubG9vcC5pbmRleCB9fVwiIGRhdGEtdG9nZ2xlLWFsdC1jb250ZW50PVwiSGlkZSBydW5uYWJsZSBxdWVyeVwiPlZpZXcgcnVubmFibGUgcXVlcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBpZiBxdWVyeS5leHBsYWluYWJsZSAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImxpbmstaW52ZXJzZVwiIGhyZWY9XCJ7eyBwYXRoKCdfcHJvZmlsZXInLCB7IHBhbmVsOiAnZGInLCB0b2tlbjogdG9rZW4sIHBhZ2U6ICdleHBsYWluJywgY29ubmVjdGlvbjogY29ubmVjdGlvbiwgcXVlcnk6IGkgfSkgfX1cIiBvbmNsaWNrPVwicmV0dXJuIGV4cGxhaW4odGhpcyk7XCIgZGF0YS10YXJnZXQtaWQ9XCJleHBsYWluLXt7IGkgfX0te3sgbG9vcC5wYXJlbnQubG9vcC5pbmRleCB9fVwiPkV4cGxhaW4gcXVlcnk8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBpZiBxdWVyeS5iYWNrdHJhY2UgaXMgZGVmaW5lZCAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7Jm5ic3A7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIGNsYXNzPVwic2YtdG9nZ2xlIGxpbmstaW52ZXJzZVwiIGRhdGEtdG9nZ2xlLXNlbGVjdG9yPVwiI2JhY2t0cmFjZS17eyBpIH19LXt7IGxvb3AucGFyZW50Lmxvb3AuaW5kZXggfX1cIiBkYXRhLXRvZ2dsZS1hbHQtY29udGVudD1cIkhpZGUgcXVlcnkgYmFja3RyYWNlXCI+VmlldyBxdWVyeSBiYWNrdHJhY2U8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJmb3JtYXR0ZWQtcXVlcnkte3sgaSB9fS17eyBsb29wLnBhcmVudC5sb29wLmluZGV4IH19XCIgY2xhc3M9XCJzcWwtcnVubmFibGUgaGlkZGVuXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IHF1ZXJ5LnNxbHxkb2N0cmluZV9mb3JtYXRfc3FsKGhpZ2hsaWdodCA9IHRydWUpIH19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGhpZGRlblwiIGRhdGEtY2xpcGJvYXJkLXRleHQ9XCJ7eyBxdWVyeS5zcWx8ZG9jdHJpbmVfZm9ybWF0X3NxbChoaWdobGlnaHQgPSBmYWxzZSl8ZSgnaHRtbF9hdHRyJykgfX1cIj5Db3B5PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIHF1ZXJ5LnJ1bm5hYmxlICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJvcmlnaW5hbC1xdWVyeS17eyBpIH19LXt7IGxvb3AucGFyZW50Lmxvb3AuaW5kZXggfX1cIiBjbGFzcz1cInNxbC1ydW5uYWJsZSBoaWRkZW5cIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIHNldCBydW5uYWJsZV9zcWwgPSAocXVlcnkuc3FsIH4gJzsnKXxkb2N0cmluZV9yZXBsYWNlX3F1ZXJ5X3BhcmFtZXRlcnMocXVlcnkucGFyYW1zKSAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgcnVubmFibGVfc3FsfGRvY3RyaW5lX3ByZXR0aWZ5X3NxbCB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gaGlkZGVuXCIgZGF0YS1jbGlwYm9hcmQtdGV4dD1cInt7IHJ1bm5hYmxlX3NxbHxlKCdodG1sX2F0dHInKSB9fVwiPkNvcHk8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgaWYgcXVlcnkuZXhwbGFpbmFibGUgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImV4cGxhaW4te3sgaSB9fS17eyBsb29wLnBhcmVudC5sb29wLmluZGV4IH19XCIgY2xhc3M9XCJzcWwtZXhwbGFpblwiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIHF1ZXJ5LmJhY2t0cmFjZSBpcyBkZWZpbmVkICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJiYWNrdHJhY2Ute3sgaSB9fS17eyBsb29wLnBhcmVudC5sb29wLmluZGV4IH19XCIgY2xhc3M9XCJoaWRkZW5cIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9XCJjb2xcIj4jPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+RmlsZS9DYWxsPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGZvciB0cmFjZSBpbiBxdWVyeS5iYWNrdHJhY2UgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPnt7IGxvb3AuaW5kZXggfX08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXNtYWxsXCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgc2V0IGxpbmVfbnVtYmVyID0gdHJhY2UubGluZXxkZWZhdWx0KDEpICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgaWYgdHJhY2UuZmlsZSBpcyBkZWZpbmVkICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJ7eyB0cmFjZS5maWxlfGZpbGVfbGluayhsaW5lX251bWJlcikgfX1cIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3stIHRyYWNlLmNsYXNzfGRlZmF1bHQgfiAodHJhY2UuY2xhc3MgaXMgZGVmaW5lZCA/IHRyYWNlLnR5cGV8ZGVmYXVsdCgnOjonKSkgLX19CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3RhdHVzLXdhcm5pbmdcIj57eyB0cmFjZS5mdW5jdGlvbiB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBpZiB0cmFjZS5maWxlIGlzIGRlZmluZWQgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGxpbmUge3sgbGluZV9udW1iZXIgfX0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGZvciAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBlbmRmb3IgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICAgICAgICAgICAgICB7JSBlbmRmb3IgJX0KICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPVwidGFiIHt7IGNvbGxlY3Rvci5jb25uZWN0aW9ucyBpcyBlbXB0eSA/ICdkaXNhYmxlZCcgfX1cIj4KICAgICAgICAgICAgPGgzIGNsYXNzPVwidGFiLXRpdGxlXCI+RGF0YWJhc2UgQ29ubmVjdGlvbnM8L2gzPgogICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIj4KICAgICAgICAgICAgICAgIHslIGlmIG5vdCBjb2xsZWN0b3IuY29ubmVjdGlvbnMgJX0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+VGhlcmUgYXJlIG5vIGNvbmZpZ3VyZWQgZGF0YWJhc2UgY29ubmVjdGlvbnMuPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgeyUgZWxzZSAlfQogICAgICAgICAgICAgICAgICAgIHt7IGhlbHBlci5yZW5kZXJfc2ltcGxlX3RhYmxlKCdOYW1lJywgJ1NlcnZpY2UnLCBjb2xsZWN0b3IuY29ubmVjdGlvbnMpIH19CiAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz1cInRhYiB7eyBjb2xsZWN0b3IubWFuYWdlcnMgaXMgZW1wdHkgPyAnZGlzYWJsZWQnIH19XCI+CiAgICAgICAgICAgIDxoMyBjbGFzcz1cInRhYi10aXRsZVwiPkVudGl0eSBNYW5hZ2VyczwvaDM+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgoKICAgICAgICAgICAgICAgIHslIGlmIG5vdCBjb2xsZWN0b3IubWFuYWdlcnMgJX0KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+VGhlcmUgYXJlIG5vIGNvbmZpZ3VyZWQgZW50aXR5IG1hbmFnZXJzLjwvcD4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgICAgICB7eyBoZWxwZXIucmVuZGVyX3NpbXBsZV90YWJsZSgnTmFtZScsICdTZXJ2aWNlJywgY29sbGVjdG9yLm1hbmFnZXJzKSB9fQogICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9XCJ0YWIge3sgbm90IGNvbGxlY3Rvci5jYWNoZUVuYWJsZWQgPyAnZGlzYWJsZWQnIH19XCI+CiAgICAgICAgICAgIDxoMyBjbGFzcz1cInRhYi10aXRsZVwiPlNlY29uZCBMZXZlbCBDYWNoZTwvaDM+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiPgoKICAgICAgICAgICAgICAgIHslIGlmIG5vdCBjb2xsZWN0b3IuY2FjaGVFbmFibGVkICV9CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNlY29uZCBMZXZlbCBDYWNoZSBpcyBub3QgZW5hYmxlZC48L3A+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAgeyUgaWYgbm90IGNvbGxlY3Rvci5jYWNoZUNvdW50cyAlfQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1wdHlcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwPlNlY29uZCBsZXZlbCBjYWNoZSBpbmZvcm1hdGlvbiBpcyBub3QgYXZhaWxhYmxlLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgeyUgZWxzZSAlfQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWV0cmljc1wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj57eyBjb2xsZWN0b3IuY2FjaGVDb3VudHMuaGl0cyB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+SGl0czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZXRyaWNcIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZhbHVlXCI+e3sgY29sbGVjdG9yLmNhY2hlQ291bnRzLm1pc3NlcyB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+TWlzc2VzPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1ldHJpY1wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwidmFsdWVcIj57eyBjb2xsZWN0b3IuY2FjaGVDb3VudHMucHV0cyB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+UHV0czwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIGNvbGxlY3Rvci5jYWNoZVJlZ2lvbnMuaGl0cyAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPk51bWJlciBvZiBjYWNoZSBoaXRzPC9oMz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGhlbHBlci5yZW5kZXJfc2ltcGxlX3RhYmxlKCdSZWdpb24nLCAnSGl0cycsIGNvbGxlY3Rvci5jYWNoZVJlZ2lvbnMuaGl0cykgfX0KICAgICAgICAgICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KCiAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIGNvbGxlY3Rvci5jYWNoZVJlZ2lvbnMubWlzc2VzICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+TnVtYmVyIG9mIGNhY2hlIG1pc3NlczwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBoZWxwZXIucmVuZGVyX3NpbXBsZV90YWJsZSgnUmVnaW9uJywgJ01pc3NlcycsIGNvbGxlY3Rvci5jYWNoZVJlZ2lvbnMubWlzc2VzKSB9fQogICAgICAgICAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQoKICAgICAgICAgICAgICAgICAgICAgICAgeyUgaWYgY29sbGVjdG9yLmNhY2hlUmVnaW9ucy5wdXRzICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDM+TnVtYmVyIG9mIGNhY2hlIHB1dHM8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgaGVscGVyLnJlbmRlcl9zaW1wbGVfdGFibGUoJ1JlZ2lvbicsICdQdXRzJywgY29sbGVjdG9yLmNhY2hlUmVnaW9ucy5wdXRzKSB9fQogICAgICAgICAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQogICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz1cInRhYiB7eyBub3QgY29sbGVjdG9yLmVudGl0aWVzID8gJ2Rpc2FibGVkJyB9fVwiPgogICAgICAgICAgICA8aDMgY2xhc3M9XCJ0YWItdGl0bGVcIj5FbnRpdGllcyBNYXBwaW5nPC9oMz4KICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYi1jb250ZW50XCI+CgogICAgICAgICAgICAgICAgeyUgaWYgbm90IGNvbGxlY3Rvci5lbnRpdGllcyAlfQogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbXB0eVwiPgogICAgICAgICAgICAgICAgICAgICAgICA8cD5ObyBtYXBwZWQgZW50aXRpZXMuPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgeyUgZWxzZSAlfQogICAgICAgICAgICAgICAgICAgIHslIGZvciBtYW5hZ2VyLCBjbGFzc2VzIGluIGNvbGxlY3Rvci5lbnRpdGllcyAlfQogICAgICAgICAgICAgICAgICAgICAgICB7JSBpZiBjb2xsZWN0b3IubWFuYWdlcnN8bGVuZ3RoID4gMSAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPnt7IG1hbmFnZXIgfX0gPHNtYWxsPmVudGl0eSBtYW5hZ2VyPC9zbWFsbD48L2gzPgogICAgICAgICAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQoKICAgICAgICAgICAgICAgICAgICAgICAgeyUgaWYgY2xhc3NlcyBpcyBlbXB0eSAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+Tm8gbG9hZGVkIGVudGl0aWVzLjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGFibGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+Q2xhc3M8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggc2NvcGU9XCJjb2xcIj5NYXBwaW5nIGVycm9yczwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBmb3IgY2xhc3MgaW4gY2xhc3NlcyAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBzZXQgY29udGFpbnNfZXJyb3JzID0gY29sbGVjdG9yLm1hcHBpbmdFcnJvcnNbbWFuYWdlcl0gaXMgZGVmaW5lZCBhbmQgY29sbGVjdG9yLm1hcHBpbmdFcnJvcnNbbWFuYWdlcl1bY2xhc3MuY2xhc3NdIGlzIGRlZmluZWQgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPVwie3sgY29udGFpbnNfZXJyb3JzID8gJ3N0YXR1cy1lcnJvcicgfX1cIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwie3sgY2xhc3MuZmlsZXxmaWxlX2xpbmsoY2xhc3MubGluZSkgfX1cIj57eyBjbGFzcy4gY2xhc3N9fTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJmb250LW5vcm1hbFwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIGNvbnRhaW5zX2Vycm9ycyAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBmb3IgZXJyb3IgaW4gY29sbGVjdG9yLm1hcHBpbmdFcnJvcnNbbWFuYWdlcl1bY2xhc3MuY2xhc3NdICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPnt7IGVycm9yIH19PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGZvciAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm8gZXJyb3JzLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGlmICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZGZvciAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQogICAgICAgICAgICAgICAgICAgIHslIGVuZGZvciAlfQogICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj4vLzwhW0NEQVRBWwogICAgICAgIGZ1bmN0aW9uIGV4cGxhaW4obGluaykgewogICAgICAgICAgICBcInVzZSBzdHJpY3RcIjsKCiAgICAgICAgICAgIHZhciB0YXJnZXRJZCA9IGxpbmsuZ2V0QXR0cmlidXRlKCdkYXRhLXRhcmdldC1pZCcpOwogICAgICAgICAgICB2YXIgdGFyZ2V0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRhcmdldElkKTsKCiAgICAgICAgICAgIGlmICh0YXJnZXRFbGVtZW50LnN0eWxlLmRpc3BsYXkgIT0gJ2Jsb2NrJykgewogICAgICAgICAgICAgICAgaWYgKHRhcmdldEVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLXNmdXJsJykgIT09IGxpbmsuaHJlZikgewogICAgICAgICAgICAgICAgICAgIGZldGNoKGxpbmsuaHJlZiwgewogICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7J1gtUmVxdWVzdGVkLVdpdGgnOiAnWE1MSHR0cFJlcXVlc3QnfQogICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oYXN5bmMgZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnQuaW5uZXJIVE1MID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpCiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXNmdXJsJywgbGluay5ocmVmKQogICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWxlbWVudC5pbm5lckhUTUwgPSAnQW4gZXJyb3Igb2NjdXJyZWQgd2hpbGUgbG9hZGluZyB0aGUgcXVlcnkgZXhwbGFuYXRpb24uJzsKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICBsaW5rLmlubmVySFRNTCA9ICdIaWRlIHF1ZXJ5IGV4cGxhbmF0aW9uJzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgIGxpbmsuaW5uZXJIVE1MID0gJ0V4cGxhaW4gcXVlcnknOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzb3J0VGFibGUoaGVhZGVyLCBjb2x1bW4sIHRhcmdldElkKSB7CiAgICAgICAgICAgIFwidXNlIHN0cmljdFwiOwoKICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHBhcnNlSW50KGhlYWRlci5nZXRBdHRyaWJ1dGUoJ2RhdGEtc29ydC1kaXJlY3Rpb24nKSkgfHwgMSwKICAgICAgICAgICAgICAgIGl0ZW1zID0gW10sCiAgICAgICAgICAgICAgICB0YXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YXJnZXRJZCksCiAgICAgICAgICAgICAgICByb3dzID0gdGFyZ2V0LmNoaWxkcmVuLAogICAgICAgICAgICAgICAgaGVhZGVycyA9IGhlYWRlci5wYXJlbnRFbGVtZW50LmNoaWxkcmVuLAogICAgICAgICAgICAgICAgaTsKCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByb3dzLmxlbmd0aDsgKytpKSB7CiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHJvd3NbaV0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaGVhZGVycy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgaGVhZGVyc1tpXS5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc29ydC1kaXJlY3Rpb24nKTsKICAgICAgICAgICAgICAgIGlmIChoZWFkZXJzW2ldLmNoaWxkcmVuLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzW2ldLmNoaWxkcmVuWzBdLmlubmVySFRNTCA9ICcnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBoZWFkZXIuc2V0QXR0cmlidXRlKCdkYXRhLXNvcnQtZGlyZWN0aW9uJywgKC0xKmRpcmVjdGlvbikudG9TdHJpbmcoKSk7CiAgICAgICAgICAgIGhlYWRlci5jaGlsZHJlblswXS5pbm5lckhUTUwgPSBkaXJlY3Rpb24gPiAwID8gJzxzcGFuIGNsYXNzPVwidGV4dC1tdXRlZFwiPiYjOTY1MDs8L3NwYW4+JyA6ICc8c3BhbiBjbGFzcz1cInRleHQtbXV0ZWRcIj4mIzk2NjA7PC9zcGFuPic7CgogICAgICAgICAgICBpdGVtcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBkaXJlY3Rpb24gKiAocGFyc2VGbG9hdChhLmNoaWxkcmVuW2NvbHVtbl0uaW5uZXJIVE1MKSAtIHBhcnNlRmxvYXQoYi5jaGlsZHJlbltjb2x1bW5dLmlubmVySFRNTCkpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSkgewogICAgICAgICAgICAgICAgdGFyZ2V0LmFwcGVuZENoaWxkKGl0ZW1zW2ldKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKG5hdmlnYXRvci5jbGlwYm9hcmQpIHsKICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtY2xpcGJvYXJkLXRleHRdJykuZm9yRWFjaChmdW5jdGlvbihidXR0b24pIHsKICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKTsKICAgICAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2RhdGEtY2xpcGJvYXJkLXRleHQnKSk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIC8vXV0+PC9zY3JpcHQ+CnslIGVuZGJsb2NrICV9Cgp7JSBtYWNybyByZW5kZXJfc2ltcGxlX3RhYmxlKGxhYmVsMSwgbGFiZWwyLCBkYXRhKSAlfQogICAgPHRhYmxlPgogICAgICAgIDx0aGVhZD4KICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0aCBzY29wZT1cImNvbFwiIGNsYXNzPVwia2V5XCI+e3sgbGFiZWwxIH19PC90aD4KICAgICAgICAgICAgPHRoIHNjb3BlPVwiY29sXCI+e3sgbGFiZWwyIH19PC90aD4KICAgICAgICA8L3RyPgogICAgICAgIDwvdGhlYWQ+CiAgICAgICAgPHRib2R5PgogICAgICAgIHslIGZvciBrZXksIHZhbHVlIGluIGRhdGEgJX0KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRoIHNjb3BlPVwicm93XCI+e3sga2V5IH19PC90aD4KICAgICAgICAgICAgICAgIDx0ZD57eyB2YWx1ZSB9fTwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgeyUgZW5kZm9yICV9CiAgICAgICAgPC90Ym9keT4KICAgIDwvdGFibGU+CnslIGVuZG1hY3JvICV9CiIsICJARG9jdHJpbmUvQ29sbGVjdG9yL2RiLmh0bWwudHdpZyIsICIvdmFyL3d3dy9odG1sL21lZGlhdGVrZm9ybWF0aW9uL3ZlbmRvci9kb2N0cmluZS9kb2N0cmluZS1idW5kbGUvdGVtcGxhdGVzL0NvbGxlY3Rvci9kYi5odG1sLnR3aWciKTsKICAgIH0KfQoiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZG9jQmxvY2siO047czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBtZXRhZGF0YSI7YTowOnt9fQ==";