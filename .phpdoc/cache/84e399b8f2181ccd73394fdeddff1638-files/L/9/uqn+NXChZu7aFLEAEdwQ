1738044951
84e399b8f2181ccd73394fdeddff1638-phpdoc%3A4532fc83054c9620acf75391220cb928-087837ad4cc6c5a983c8b119580e7574
s:9176:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjE0OiJ2YWxpZGF0aW9uLnBocCI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9czo0MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBlbnVtcyI7YTowOnt9czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBoYXNoIjtzOjMyOiIwODc4MzdhZDRjYzZjNWE5ODNjOGIxMTk1ODBlNzU3NCI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjMwOiJ2YXIvY2FjaGUvdGVzdHMvdmFsaWRhdGlvbi5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjU5Njg6Ijw/cGhwCgovLyBUaGlzIGZpbGUgaGFzIGJlZW4gYXV0by1nZW5lcmF0ZWQgYnkgdGhlIFN5bWZvbnkgQ2FjaGUgQ29tcG9uZW50LgoKcmV0dXJuIFtbCgonU3ltZm9ueS5Db21wb25lbnQuRm9ybS5Gb3JtJyA9PiAwLAonSXRlcmF0b3JBZ2dyZWdhdGUnID0+IDEsCidTeW1mb255LkNvbXBvbmVudC5Gb3JtLkZvcm1JbnRlcmZhY2UnID0+IDIsCidTeW1mb255LkNvbXBvbmVudC5Gb3JtLkNsZWFyYWJsZUVycm9yc0ludGVyZmFjZScgPT4gMywKJ1RyYXZlcnNhYmxlJyA9PiA0LAonQ291bnRhYmxlJyA9PiA1LAonQXJyYXlBY2Nlc3MnID0+IDYsCgpdLCBbCgowID0+IHN0YXRpYyBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXEh5ZHJhdG9yOjpoeWRyYXRlKAogICAgICAgICRvID0gWwogICAgICAgICAgICAoXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXFJlZ2lzdHJ5OjokZmFjdG9yaWVzWydTeW1mb255XFxDb21wb25lbnRcXFZhbGlkYXRvclxcTWFwcGluZ1xcQ2xhc3NNZXRhZGF0YSddID8/IFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxSZWdpc3RyeTo6ZignU3ltZm9ueVxcQ29tcG9uZW50XFxWYWxpZGF0b3JcXE1hcHBpbmdcXENsYXNzTWV0YWRhdGEnKSkoKSwKICAgICAgICAgICAgY2xvbmUgKFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxSZWdpc3RyeTo6JHByb3RvdHlwZXNbJ1N5bWZvbnlcXENvbXBvbmVudFxcRm9ybVxcRXh0ZW5zaW9uXFxWYWxpZGF0b3JcXENvbnN0cmFpbnRzXFxGb3JtJ10gPz8gXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXFJlZ2lzdHJ5OjpwKCdTeW1mb255XFxDb21wb25lbnRcXEZvcm1cXEV4dGVuc2lvblxcVmFsaWRhdG9yXFxDb25zdHJhaW50c1xcRm9ybScpKSwKICAgICAgICBdLAogICAgICAgIG51bGwsCiAgICAgICAgWwogICAgICAgICAgICAnc3RkQ2xhc3MnID0+IFsKICAgICAgICAgICAgICAgICdjb25zdHJhaW50cycgPT4gWwogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgJG9bMV0sCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAnY29uc3RyYWludHNCeUdyb3VwJyA9PiBbCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAnRGVmYXVsdCcgPT4gWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJG9bMV0sCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICdGb3JtJyA9PiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkb1sxXSwKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICd0cmF2ZXJzYWxTdHJhdGVneScgPT4gWwogICAgICAgICAgICAgICAgICAgIDIsCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgJ25hbWUnID0+IFsKICAgICAgICAgICAgICAgICAgICAnU3ltZm9ueVxcQ29tcG9uZW50XFxGb3JtXFxGb3JtJywKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAnZGVmYXVsdEdyb3VwJyA9PiBbCiAgICAgICAgICAgICAgICAgICAgJ0Zvcm0nLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICdncm91cHMnID0+IFsKICAgICAgICAgICAgICAgICAgICAxID0+IFsKICAgICAgICAgICAgICAgICAgICAgICAgJ0RlZmF1bHQnLAogICAgICAgICAgICAgICAgICAgICAgICAnRm9ybScsCiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgIF0sCiAgICAgICAgXSwKICAgICAgICAkb1swXSwKICAgICAgICBbXQogICAgKTsKfSwKMSA9PiBzdGF0aWMgZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxIeWRyYXRvcjo6aHlkcmF0ZSgKICAgICAgICAkbyA9IFsKICAgICAgICAgICAgKFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxSZWdpc3RyeTo6JGZhY3Rvcmllc1snU3ltZm9ueVxcQ29tcG9uZW50XFxWYWxpZGF0b3JcXE1hcHBpbmdcXENsYXNzTWV0YWRhdGEnXSA/PyBcU3ltZm9ueVxDb21wb25lbnRcVmFyRXhwb3J0ZXJcSW50ZXJuYWxcUmVnaXN0cnk6OmYoJ1N5bWZvbnlcXENvbXBvbmVudFxcVmFsaWRhdG9yXFxNYXBwaW5nXFxDbGFzc01ldGFkYXRhJykpKCksCiAgICAgICAgXSwKICAgICAgICBudWxsLAogICAgICAgIFsKICAgICAgICAgICAgJ3N0ZENsYXNzJyA9PiBbCiAgICAgICAgICAgICAgICAnbmFtZScgPT4gWwogICAgICAgICAgICAgICAgICAgICdJdGVyYXRvckFnZ3JlZ2F0ZScsCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgJ2RlZmF1bHRHcm91cCcgPT4gWwogICAgICAgICAgICAgICAgICAgICdJdGVyYXRvckFnZ3JlZ2F0ZScsCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICBdLAogICAgICAgIF0sCiAgICAgICAgJG9bMF0sCiAgICAgICAgW10KICAgICk7Cn0sCjIgPT4gc3RhdGljIGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBcU3ltZm9ueVxDb21wb25lbnRcVmFyRXhwb3J0ZXJcSW50ZXJuYWxcSHlkcmF0b3I6Omh5ZHJhdGUoCiAgICAgICAgJG8gPSBbCiAgICAgICAgICAgIChcU3ltZm9ueVxDb21wb25lbnRcVmFyRXhwb3J0ZXJcSW50ZXJuYWxcUmVnaXN0cnk6OiRmYWN0b3JpZXNbJ1N5bWZvbnlcXENvbXBvbmVudFxcVmFsaWRhdG9yXFxNYXBwaW5nXFxDbGFzc01ldGFkYXRhJ10gPz8gXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXFJlZ2lzdHJ5OjpmKCdTeW1mb255XFxDb21wb25lbnRcXFZhbGlkYXRvclxcTWFwcGluZ1xcQ2xhc3NNZXRhZGF0YScpKSgpLAogICAgICAgIF0sCiAgICAgICAgbnVsbCwKICAgICAgICBbCiAgICAgICAgICAgICdzdGRDbGFzcycgPT4gWwogICAgICAgICAgICAgICAgJ25hbWUnID0+IFsKICAgICAgICAgICAgICAgICAgICAnU3ltZm9ueVxcQ29tcG9uZW50XFxGb3JtXFxGb3JtSW50ZXJmYWNlJywKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAnZGVmYXVsdEdyb3VwJyA9PiBbCiAgICAgICAgICAgICAgICAgICAgJ0Zvcm1JbnRlcmZhY2UnLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgXSwKICAgICAgICBdLAogICAgICAgICRvWzBdLAogICAgICAgIFtdCiAgICApOwp9LAozID0+IHN0YXRpYyBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXEh5ZHJhdG9yOjpoeWRyYXRlKAogICAgICAgICRvID0gWwogICAgICAgICAgICAoXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXFJlZ2lzdHJ5OjokZmFjdG9yaWVzWydTeW1mb255XFxDb21wb25lbnRcXFZhbGlkYXRvclxcTWFwcGluZ1xcQ2xhc3NNZXRhZGF0YSddID8/IFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxSZWdpc3RyeTo6ZignU3ltZm9ueVxcQ29tcG9uZW50XFxWYWxpZGF0b3JcXE1hcHBpbmdcXENsYXNzTWV0YWRhdGEnKSkoKSwKICAgICAgICBdLAogICAgICAgIG51bGwsCiAgICAgICAgWwogICAgICAgICAgICAnc3RkQ2xhc3MnID0+IFsKICAgICAgICAgICAgICAgICduYW1lJyA9PiBbCiAgICAgICAgICAgICAgICAgICAgJ1N5bWZvbnlcXENvbXBvbmVudFxcRm9ybVxcQ2xlYXJhYmxlRXJyb3JzSW50ZXJmYWNlJywKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAnZGVmYXVsdEdyb3VwJyA9PiBbCiAgICAgICAgICAgICAgICAgICAgJ0NsZWFyYWJsZUVycm9yc0ludGVyZmFjZScsCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICBdLAogICAgICAgIF0sCiAgICAgICAgJG9bMF0sCiAgICAgICAgW10KICAgICk7Cn0sCjQgPT4gc3RhdGljIGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBcU3ltZm9ueVxDb21wb25lbnRcVmFyRXhwb3J0ZXJcSW50ZXJuYWxcSHlkcmF0b3I6Omh5ZHJhdGUoCiAgICAgICAgJG8gPSBbCiAgICAgICAgICAgIChcU3ltZm9ueVxDb21wb25lbnRcVmFyRXhwb3J0ZXJcSW50ZXJuYWxcUmVnaXN0cnk6OiRmYWN0b3JpZXNbJ1N5bWZvbnlcXENvbXBvbmVudFxcVmFsaWRhdG9yXFxNYXBwaW5nXFxDbGFzc01ldGFkYXRhJ10gPz8gXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXFJlZ2lzdHJ5OjpmKCdTeW1mb255XFxDb21wb25lbnRcXFZhbGlkYXRvclxcTWFwcGluZ1xcQ2xhc3NNZXRhZGF0YScpKSgpLAogICAgICAgIF0sCiAgICAgICAgbnVsbCwKICAgICAgICBbCiAgICAgICAgICAgICdzdGRDbGFzcycgPT4gWwogICAgICAgICAgICAgICAgJ25hbWUnID0+IFsKICAgICAgICAgICAgICAgICAgICAnVHJhdmVyc2FibGUnLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICdkZWZhdWx0R3JvdXAnID0+IFsKICAgICAgICAgICAgICAgICAgICAnVHJhdmVyc2FibGUnLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgXSwKICAgICAgICBdLAogICAgICAgICRvWzBdLAogICAgICAgIFtdCiAgICApOwp9LAo1ID0+IHN0YXRpYyBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXEh5ZHJhdG9yOjpoeWRyYXRlKAogICAgICAgICRvID0gWwogICAgICAgICAgICAoXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXFJlZ2lzdHJ5OjokZmFjdG9yaWVzWydTeW1mb255XFxDb21wb25lbnRcXFZhbGlkYXRvclxcTWFwcGluZ1xcQ2xhc3NNZXRhZGF0YSddID8/IFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxSZWdpc3RyeTo6ZignU3ltZm9ueVxcQ29tcG9uZW50XFxWYWxpZGF0b3JcXE1hcHBpbmdcXENsYXNzTWV0YWRhdGEnKSkoKSwKICAgICAgICBdLAogICAgICAgIG51bGwsCiAgICAgICAgWwogICAgICAgICAgICAnc3RkQ2xhc3MnID0+IFsKICAgICAgICAgICAgICAgICduYW1lJyA9PiBbCiAgICAgICAgICAgICAgICAgICAgJ0NvdW50YWJsZScsCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgJ2RlZmF1bHRHcm91cCcgPT4gWwogICAgICAgICAgICAgICAgICAgICdDb3VudGFibGUnLAogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgXSwKICAgICAgICBdLAogICAgICAgICRvWzBdLAogICAgICAgIFtdCiAgICApOwp9LAo2ID0+IHN0YXRpYyBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXEh5ZHJhdG9yOjpoeWRyYXRlKAogICAgICAgICRvID0gWwogICAgICAgICAgICAoXFN5bWZvbnlcQ29tcG9uZW50XFZhckV4cG9ydGVyXEludGVybmFsXFJlZ2lzdHJ5OjokZmFjdG9yaWVzWydTeW1mb255XFxDb21wb25lbnRcXFZhbGlkYXRvclxcTWFwcGluZ1xcQ2xhc3NNZXRhZGF0YSddID8/IFxTeW1mb255XENvbXBvbmVudFxWYXJFeHBvcnRlclxJbnRlcm5hbFxSZWdpc3RyeTo6ZignU3ltZm9ueVxcQ29tcG9uZW50XFxWYWxpZGF0b3JcXE1hcHBpbmdcXENsYXNzTWV0YWRhdGEnKSkoKSwKICAgICAgICBdLAogICAgICAgIG51bGwsCiAgICAgICAgWwogICAgICAgICAgICAnc3RkQ2xhc3MnID0+IFsKICAgICAgICAgICAgICAgICduYW1lJyA9PiBbCiAgICAgICAgICAgICAgICAgICAgJ0FycmF5QWNjZXNzJywKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAnZGVmYXVsdEdyb3VwJyA9PiBbCiAgICAgICAgICAgICAgICAgICAgJ0FycmF5QWNjZXNzJywKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgIF0sCiAgICAgICAgXSwKICAgICAgICAkb1swXSwKICAgICAgICBbXQogICAgKTsKfSwKCl1dOwoiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZG9jQmxvY2siO047czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBtZXRhZGF0YSI7YTowOnt9fQ==";